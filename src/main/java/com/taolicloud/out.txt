\n
./auth//shiro//RetryLimitHashedCredentialsMatcher.java
\n
package com.taolicloud.auth.shiro;

import java.util.concurrent.atomic.AtomicInteger;

import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.ExcessiveAttemptsException;
import org.apache.shiro.authc.credential.HashedCredentialsMatcher;
import org.apache.shiro.cache.Cache;
import org.apache.shiro.cache.CacheManager;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [登陆缓存配置文件]
 */
public class RetryLimitHashedCredentialsMatcher extends HashedCredentialsMatcher {
	
	private Cache<String, AtomicInteger> passwordRetryCache;

	public RetryLimitHashedCredentialsMatcher(CacheManager cacheManager) {
		passwordRetryCache = cacheManager.getCache("passwordRetryCache");
	}

	@Override
	public boolean doCredentialsMatch(AuthenticationToken token, AuthenticationInfo info) {
		String userName = (String) token.getPrincipal();
		AtomicInteger retryCount = passwordRetryCache.get(userName);
		if (retryCount == null) {
			retryCount = new AtomicInteger(0);
			passwordRetryCache.put(userName, retryCount);
		}
		if (retryCount.incrementAndGet() > 5) {
			throw new ExcessiveAttemptsException();
		}
		boolean matchers = super.doCredentialsMatch(token, info);
		if (matchers) {
			passwordRetryCache.remove(userName);
		}
		return matchers;
	}
}
\n
./auth//shiro//UserRealm.java
\n
package com.taolicloud.auth.shiro;

import java.util.HashSet;
import java.util.Set;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.LockedAccountException;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authz.AuthorizationException;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.apache.shiro.util.ByteSource;
import org.springframework.beans.factory.annotation.Autowired;

import com.taolicloud.core.entity.User;
import com.taolicloud.core.service.UserService;
import com.taolicloud.web.bind.Status;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [shiro权限认证文件]
 */
public class UserRealm extends AuthorizingRealm{

	@Autowired
	private UserService userService;

	/* (non-Javadoc)

	 * @see org.apache.shiro.realm.AuthorizingRealm#doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)

	 */
	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principal) {
		if(principal == null) {
			throw new AuthorizationException("凭证为空!");
		}
		SimpleAuthorizationInfo authInfo = new SimpleAuthorizationInfo();
		Set<String> roles = new HashSet<>();
		String loginName = (String)principal.getPrimaryPrincipal();
		User user = null;
		user = userService.findByUsername(loginName);
		if(user != null) {
			roles.add(user.getTypeName());
			authInfo.setRoles(roles);
			return authInfo;
		}else {
			return null;
		}
	}

	/* (non-Javadoc)

	 * @see org.apache.shiro.realm.AuthenticatingRealm#doGetAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)

	 */
	@Override
	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
		
		String loginName = (String) token.getPrincipal();
		User user = null;
		
		user = userService.findByUsername(loginName);
		
		if(user == null) {
			throw new UnknownAccountException("UnknownAccount!");
		}
		if(user.getStatus() == Status.LOCKED.value()) {
			throw new LockedAccountException("LockedAccount !");
		}
		SimpleAuthenticationInfo authInfo = new SimpleAuthenticationInfo(
				user.getUsername(),
				user.getPassword(),
				ByteSource.Util.bytes(user.getCredentialsSalt()),
				getName());
		
		return authInfo;
	}
}
\n
./core//admin//controller//AdminController.java
\n
package com.taolicloud.core.admin.controller;

import java.util.Date;

import javax.servlet.http.HttpSession;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.LockedAccountException;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.session.Session;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.taolicloud.core.entity.User;
import com.taolicloud.core.service.UserService;
import com.taolicloud.web.bind.Const;
import com.taolicloud.web.bind.RoleType;
import com.taolicloud.web.bind.Status;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className AdminController
 * @date   2018年3月9日下午3:26:47
 * @desc  [登陆与注册控制层]
 */

@Controller
@RequestMapping("/admin")
public class AdminController {
	
	@Autowired
	private UserService userService;
	/**
	 * 进入主页面
	 * @param session
	 * @return
	 */
	@GetMapping("/index")
	public String index(HttpSession session) {
		User user = (User)session.getAttribute(Const.LOGIN_ADMIN);
		if(user == null) {
			return "redirect:/admin/login";
		}else {
			user = userService.findByUsername(user.getUsername());
			user.setLastLoginTime(new Date());
			userService.upDate(user);
			return "admin/index";
		}
	}
	
	@GetMapping("/login")
	public String login() {
		return "admin/login";
	}
	
	@PostMapping("/login")
	public String login(String username,String password,String validateCode,Model model) {
		Session session = SecurityUtils.getSubject().getSession();
		String validate_code = (String)session.getAttribute(Const.CHECK_CODE);
		if(validateCode == null || validateCode.trim().equals("")||!validateCode.trim().equalsIgnoreCase(validate_code)) {
			model.addAttribute("msg", "验证码不正确！");
			return "admin/login";
		}
		session.removeAttribute(Const.CHECK_CODE);
		Subject currUser = SecurityUtils.getSubject();
		if(!currUser.isAuthenticated()) {
			UsernamePasswordToken token = new UsernamePasswordToken(username, password);
			token.setRememberMe(true);
			try {
				System.out.println(username+password);
				currUser.login(token);
			}catch(UnknownAccountException uaex) {
				model.addAttribute("msg", "用户名或密码不正确")
				.addAttribute("firstName", username)
				.addAttribute("password", password)
				.addAttribute("validateCode", validateCode);
				return "admin/login";
			}catch(LockedAccountException laex) {
				model.addAttribute("msg", username+"已被锁定")
				.addAttribute("firstName", username)
				.addAttribute("password", password)
				.addAttribute("validateCode", validateCode);
				return "admin/login";
			}catch(AuthenticationException aex) {
				model.addAttribute("msg", "用户名或密码不正确")
				.addAttribute("firstName", username)
				.addAttribute("password", password)
				.addAttribute("validateCode", validateCode);
				return "admin/login";
			}
		}
		if(currUser.isAuthenticated()) {
			User user = null;
			user = userService.findByUsername(username);
			if(user != null) {
				session.setAttribute(Const.LOGIN_ADMIN, user);
				return "redirect:/admin/index";
			}else {
				return "admin/login";
			}
		}
		return "admin/login";
	}
	
	@GetMapping("/logout")
	public String logOut() {
		Subject subject = SecurityUtils.getSubject();
		subject.logout();
		return "redirect:/admin/login";
	}

	
	@GetMapping("/register")
	public String register() {
		return "admin/register";
	}
	
	@PostMapping("/register")
	public String register(User user, Model model) {
		
		User tmp = userService.findByUsername(user.getUsername());
		if(tmp==null) {
			user.setTypeId(2);
			user.setTypeName(RoleType.STUDENT.parseText());
			user.setStatus(Status.ENABLE.value());
			userService.saveAndFlush(user);
			return "admin/login";
		}else {
			model.addAttribute("msg", "用户名已注册").addAttribute("user", user);
			return "admin/register";
		}
	}
}\n
./core//admin//controller//FieldController.java
\n
package com.taolicloud.core.admin.controller;

import java.util.LinkedList;
import java.util.List;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresRoles;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taolicloud.core.entity.Field;
import com.taolicloud.core.service.FieldService;
import com.taolicloud.web.bind.Status;
import com.taolicloud.web.view.RequestElement;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className FieldController
 * @date   2018年3月22日上午9:28:26
 * @desc  [题库管理控制层]
 */
@Controller
@RequestMapping("/admin/field")
public class FieldController {
	
	@Autowired
	private FieldService fieldService;
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/list")
	public String list(RequestElement element, Model model) {
		Sort sort = new Sort(Direction.ASC, "id");
		Pageable pageable = new PageRequest(element.getPageNo()-1, element.getPageSize(), sort);
		Page<Field> fields = fieldService.findAll(pageable);
        int total = fields.getTotalPages();
        int start = element.getPageNo()-3>0?element.getPageNo()-3:1;
        int end = element.getPageNo()+3<total?element.getPageNo()+3:total;
        model.addAttribute("page", fields).addAttribute("start", start).addAttribute("end", end);
		return "admin/field/list";
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/add")
	public String add(Model model) {
		List<Status> status = new LinkedList<>();
		status.add(Status.ACTIVED);
		status.add(Status.LOCKED);
		model.addAttribute("status", status);
		return "admin/field/add";
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping("/add")
	public String add(Field field) {
		fieldService.saveAndFlush(field);
		return "redirect:/admin/field/list";
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@DeleteMapping("/delete/{id}")
	@ResponseBody
	public String delete(@PathVariable(name="id")int id) {
		Field field = fieldService.findById(id);
		if(field != null) {
			fieldService.delete(field);
			return "Y";
		}else {
			return "N";
		}
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping("/deleteBatch")
	@ResponseBody
	public String deleteBatch(Integer...ids) {
		for (Integer id : ids) {
			Field field = fieldService.findById(id);
			if(field != null) {
				fieldService.delete(field);
			}
		}
		return "ok";
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/edit/{id}")
	public String edit(@PathVariable(name="id")int id, Model model) {
		Field field = fieldService.findById(id);
		List<Status> status = new LinkedList<>();
		status.add(Status.ACTIVED);
		status.add(Status.LOCKED);
		model.addAttribute("status", status).addAttribute("field", field);
		return "admin/field/edit";
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping("/edit")
	public String edit(Field field){
		fieldService.saveAndFlush(field);
		return "redirect:/admin/field/list";
	}
}
\n
./core//admin//controller//KnowledgePointController.java
\n
package com.taolicloud.core.admin.controller;

import java.util.LinkedList;
import java.util.List;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresRoles;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taolicloud.core.entity.Field;
import com.taolicloud.core.entity.KnowledgePoint;
import com.taolicloud.core.service.FieldService;
import com.taolicloud.core.service.KnowledgePointService;
import com.taolicloud.web.bind.Status;
import com.taolicloud.web.view.RequestElement;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className KnowledgePointController
 * @date   2018年3月22日上午11:38:36
 * @desc  [知识点管理控制层]
 */
@Controller
@RequestMapping("admin/knowledgePoint")
public class KnowledgePointController {
	
	@Autowired
	private KnowledgePointService knowledgePointService;
	
	@Autowired
	private FieldService fieldService;
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/list")
	public String list(RequestElement element, Model model) {
		Sort sort = new Sort(Direction.ASC, "id");
		Pageable pageable = new PageRequest(element.getPageNo()-1, element.getPageSize(), sort);
		Page<KnowledgePoint> knowledgePoints = knowledgePointService.findAll(pageable);
        int total = knowledgePoints.getTotalPages();
        int start = element.getPageNo()-3>0?element.getPageNo()-3:1;
        int end = element.getPageNo()+3<total?element.getPageNo()+3:total;
        model.addAttribute("page", knowledgePoints).addAttribute("start", start).addAttribute("end", end);
		return "admin/knowledge/list";
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/add")
	public String add(Model model) {
		List<Status> status = new LinkedList<>();
		List<Field> fields = fieldService.findAll();
		status.add(Status.ACTIVED);
		status.add(Status.LOCKED);
		
		model.addAttribute("status", status).addAttribute("fields", fields);
		
		return "admin/knowledge/add";
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping("/add")
	public String add(KnowledgePoint knowledgePoint) {
		knowledgePointService.saveAndFlush(knowledgePoint);
		return "redirect:/admin/knowledgePoint/list";
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@DeleteMapping("/delete/{id}")
	@ResponseBody
	public String delete(@PathVariable(name="id")int id) {
		KnowledgePoint knowledgePoint = knowledgePointService.findById(id);
		if(knowledgePoint != null) {
			knowledgePointService.delete(knowledgePoint);
			return "Y";
		}else {
			return "N";
		}
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping("/deleteBatch")
	@ResponseBody
	public String deleteBatch(Integer...ids) {
		for (Integer id : ids) {
			KnowledgePoint knowledgePoint = knowledgePointService.findById(id);
			if(knowledgePoint != null) {
				knowledgePointService.delete(knowledgePoint);
			}
		}
		return "ok";
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/edit/{id}")
	public String edit(@PathVariable(name="id")int id, Model model) {
		KnowledgePoint knowledgePoint = knowledgePointService.findById(id);
		List<Status> status = new LinkedList<>();
		List<Field> fields = fieldService.findAll();
		status.add(Status.ACTIVED);
		status.add(Status.LOCKED);
		model.addAttribute("status", status).addAttribute("point", knowledgePoint).addAttribute("fields", fields);
		return "admin/knowledge/edit";
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping("/edit")
	public String edit(KnowledgePoint knowledgePoint){
		knowledgePointService.saveAndFlush(knowledgePoint);
		return "redirect:/admin/knowledgePoint/list";
	}
}
\n
./core//admin//controller//NoticeController.java
\n
package com.taolicloud.core.admin.controller;

import java.util.LinkedList;
import java.util.List;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresRoles;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taolicloud.core.entity.Notice;
import com.taolicloud.core.service.NoticeService;
import com.taolicloud.web.bind.Status;
import com.taolicloud.web.view.RequestElement;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className NoticeController
 * @date   2018年5月7日下午2:31:11
 * @desc  [用一句话描述改文件的功能]
 */
@Controller
@RequestMapping("/admin/notice")
public class NoticeController {
	
	@Autowired
	private NoticeService noticeService;
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@GetMapping("/list")
	public String list(RequestElement element, Model model) {
		Sort sort = new Sort(Direction.ASC, "id");
		Pageable pageable = new PageRequest(element.getPageNo()-1, element.getPageSize(), sort);
		Page<Notice> notices = noticeService.findAll(pageable);
        int total = notices.getTotalPages();
        int start = element.getPageNo()-3>0?element.getPageNo()-3:1;
        int end = element.getPageNo()+3<total?element.getPageNo()+3:total;
        model.addAttribute("page", notices).addAttribute("start", start).addAttribute("end", end);
		return "admin/notice/list";
	}
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@GetMapping("/add")
	public String add(Model model) {
		List<Status> status = new LinkedList<>();
		status.add(Status.ACTIVED);
		status.add(Status.LOCKED);
		model.addAttribute("status", status);
		return "admin/notice/add";
	}
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@PostMapping("/add")
	public String add(Notice notice) {
		noticeService.saveAndFlush(notice);
		return "redirect:/admin/notice/list";
	}
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@DeleteMapping("/delete/{id}")
	@ResponseBody
	public String delete(@PathVariable(name="id")int id) {
		Notice notice = noticeService.findById(id);
		if(notice != null) {
			noticeService.delete(notice);
			return "Y";
		}else {
			return "N";
		}
	}
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@PostMapping("/deleteBatch")
	@ResponseBody
	public String noticeBatch(Integer...ids) {
		for (Integer id : ids) {
			Notice notice = noticeService.findById(id);
			if(notice != null) {
				noticeService.delete(notice);
			}
		}
		return "ok";
	}
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@GetMapping("/edit/{id}")
	public String edit(@PathVariable(name="id")int id, Model model) {
		Notice notice = noticeService.findById(id);
		List<Status> status = new LinkedList<>();
		status.add(Status.ACTIVED);
		status.add(Status.LOCKED);
		model.addAttribute("status", status).addAttribute("notice", notice);
		return "admin/notice/edit";
	}
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@PostMapping("/edit")
	public String edit(Notice notice) {
		noticeService.saveAndFlush(notice);
		return "redirect:/admin/notice/list";
	}
}
\n
./core//admin//controller//PageController.java
\n
package com.taolicloud.core.admin.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresRoles;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taolicloud.core.entity.Field;
import com.taolicloud.core.entity.KnowledgePoint;
import com.taolicloud.core.entity.Page;
import com.taolicloud.core.entity.PageType;
import com.taolicloud.core.entity.Question;
import com.taolicloud.core.entity.QuestionPage;
import com.taolicloud.core.entity.QuestionType;
import com.taolicloud.core.entity.User;
import com.taolicloud.core.entity.util.Data;
import com.taolicloud.core.service.FieldService;
import com.taolicloud.core.service.KnowledgePointService;
import com.taolicloud.core.service.PageService;
import com.taolicloud.core.service.PageTypeService;
import com.taolicloud.core.service.QuestionPageService;
import com.taolicloud.core.service.QuestionService;
import com.taolicloud.core.service.QuestionTypeService;
import com.taolicloud.web.bind.Const;
import com.taolicloud.web.bind.Status;
import com.taolicloud.web.view.RequestElement;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className PageController
 * @date 2018年4月18日上午9:43:54
 * @desc [试卷管理控制层]
 */
@Controller
@RequestMapping("/admin/page")
public class PageController {

	@Autowired
	private PageService pageService;

	@Autowired
	private QuestionService questionService;

	@Autowired
	private QuestionTypeService questionTypeService;

	@Autowired
	private FieldService fieldService;

	@Autowired
	private KnowledgePointService knowledgePointService;

	@Autowired
	private PageTypeService pageTypeService;

	@Autowired
	private QuestionPageService questionPageService;

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/list")
	public String list(RequestElement element, Model model) {
		Sort sort = new Sort(Direction.DESC, "createTime");
		Pageable pageable = new PageRequest(element.getPageNo() - 1, element.getPageSize(), sort);
		org.springframework.data.domain.Page<Page> page = pageService.findAll(pageable);
		int total = page.getTotalPages();
        int start = element.getPageNo()-3>0?element.getPageNo()-3:1;
        int end = element.getPageNo()+3<total?element.getPageNo()+3:total;
        model.addAttribute("page", page).addAttribute("start", start).addAttribute("end", end);
		return "admin/page/list";
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@DeleteMapping("/delete/{id}")
	@ResponseBody
	public String delete(@PathVariable(name="id")int id) {
		Page page = pageService.findById(id);
		List<QuestionPage> list = questionPageService.findByPage(id);
		for (QuestionPage questionPage : list) {
			questionPageService.delete(questionPage);
		}
		if(page != null) {
			pageService.delete(page);
			return "Y";
		}else {
			return "N";
		}
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping("/deleteBatch")
	@ResponseBody
	public String deleteBatch(Integer...ids) {
		for (Integer id : ids) {
			Page page = pageService.findById(id);
			List<QuestionPage> list = questionPageService.findByPage(id);
			for (QuestionPage questionPage : list) {
				questionPageService.delete(questionPage);
			}
			if(page != null) {
				pageService.delete(page);
			}
		}
		return "ok";
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/add")
	public String add(Model model) {

		List<Field> fields = fieldService.findAll();

		List<KnowledgePoint> KnowledgePoints = knowledgePointService.findAll();

		List<PageType> pageTypes = pageTypeService.findAll();

		model.addAttribute("fileds", fields).addAttribute("knowledges", KnowledgePoints).addAttribute("pageTypes",
				pageTypes);

		return "admin/page/add";
	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping("/add")
	public String add(Page page, HttpSession session) {
		User user = (User)session.getAttribute(Const.LOGIN_ADMIN);
		page.setCreator(user.getUsername());
		pageService.saveAndFlush(page);
		return "redirect:/admin/page/edit/" + page.getId();
	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping("/updata")
	public String updata(Integer id, float point) {
		Page page = pageService.findById(id);
		page.setPassPoint(point);
		pageService.saveAndFlush(page);
		return "redirect:/admin/page/list";
	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/edit/{id}")
	public String edit(@PathVariable("id") Integer id, Model model) {
		Page page = pageService.findById(id);
		List<Question> single = new ArrayList<>();
		List<Question> multiple = new ArrayList<>();
		List<Question> judge = new ArrayList<>();
		List<Question> fill = new ArrayList<>();
		List<QuestionPage> list = questionPageService.findByPage(id);
		float total = 0;
		for (QuestionPage questionPage : list) {
			questionPage.getQuestion().setPoints(questionPage.getPoints());
			if (questionPage.getQuestion().getQuestionType().getId() == 1) {
				single.add(questionPage.getQuestion());
			} else if (questionPage.getQuestion().getQuestionType().getId() == 2) {
				multiple.add(questionPage.getQuestion());
			} else if (questionPage.getQuestion().getQuestionType().getId() == 3) {
				judge.add(questionPage.getQuestion());
			} else {
				fill.add(questionPage.getQuestion());
			}
			total += questionPage.getPoints();
		}
		page.setTotalPoint(total);
		pageService.saveAndFlush(page);
		model.addAttribute("single", single);
		model.addAttribute("multiple", multiple);
		model.addAttribute("judge", judge);
		model.addAttribute("fill", fill);
		model.addAttribute("page", page);
		return "admin/page/edit";
	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/addQuestion-{fieldId}-{knowledge}-{questionType}-{pid}")
	public String question(@PathVariable("fieldId") Integer fieldId, @PathVariable("knowledge") Integer knowledge,
			@PathVariable("questionType") Integer questionType, @PathVariable("pid") Integer pid,
			RequestElement element, Model model) {
		Sort sort = new Sort(Direction.DESC, "createTime");
		Pageable pageable = new PageRequest(element.getPageNo() - 1, element.getPageSize(), sort);
		Field field = fieldService.findById(fieldId);
		QuestionType qType = questionTypeService.findById(questionType);
		org.springframework.data.domain.Page<Question> questions = questionService
				.findByFieldAndKnowledgePointAndQuestionType(field, knowledge, qType, pageable);
		int total = questions.getTotalPages();
		int start = element.getPageNo() - 3 > 0 ? element.getPageNo() - 3 : 1;
		int end = element.getPageNo() + 3 < total ? element.getPageNo() + 3 : total;

		List<Field> fields = fieldService.findAll();
		model.addAttribute("fields", fields);
		model.addAttribute("fieldId", fieldId);

		List<KnowledgePoint> knowledgePoints = new ArrayList<>();
		if (fieldId == 0) {
			knowledgePoints = knowledgePointService.findAll();
		} else {
			knowledgePoints.addAll(knowledgePointService.getKnowledgePointByField(field));
		}
		model.addAttribute("knowledgePoints", knowledgePoints);
		model.addAttribute("knowledge", knowledge);

		List<QuestionType> questionTypes = questionTypeService.findAll();
		model.addAttribute("questionTypes", questionTypes);
		model.addAttribute("questionType", questionType);

		List<QuestionPage> questionPages = questionPageService.findByPage(pid);
		List<Integer> ids = new ArrayList<>();
		for (QuestionPage questionPage : questionPages) {
			ids.add(questionPage.getQuestion().getId());
		}

		model.addAttribute("ids", ids);
		model.addAttribute("pid", pid);
		model.addAttribute("page", questions).addAttribute("start", start).addAttribute("end", end);
		return "admin/page/add_qustion";
	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping(value = "/addQuestion", produces = "application/json;charset=UTF-8")
	@ResponseBody
	Data question(Integer pid, Integer... ids) {
		Page page = pageService.findById(pid);
		for (Integer id : ids) {
			Question question = questionService.findById(id);
			if (question != null) {
				QuestionPage questionPage = new QuestionPage();
				questionPage.setPage(page);
				questionPage.setQuestion(question);
				questionPage = questionPageService.saveAndFlush(questionPage);
			}
		}
		return Data.success(Data.NOOP);
	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping(value = "/deleteQuestion")
	public String delete_question(Integer qid, Integer pid, Model model) {
		List<QuestionPage> questions = questionPageService.findByPage(pid);
		for (QuestionPage po : questions) {
			if (po.getQuestion().getId() == qid) {
				questionPageService.delete(po);
			}
		}
		return "redirect:/admin/page/edit/" + pid;
	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/editPoints")
	public String edit_points(Integer qid, Integer pid, Model model) {
		Question question = questionService.findById(qid);
		Page page = pageService.findById(pid);
		model.addAttribute("question", question);
		model.addAttribute("page", page);
		return "admin/page/edit_question";
	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping(value = "/editPoints", produces = "application/json;charset=UTF-8")
	@ResponseBody
	Data edit_points(Integer qid, Integer pid, Integer type, Float points, Model model) {
		Data data = Data.failured("操作失败！");
		List<QuestionPage> questions = questionPageService.findByPage(pid);
		if (type == -1) {
			for (QuestionPage po : questions) {
				if (po.getQuestion().getId() == qid) {
					po.setPoints(points);
					questionPageService.updata(po);
					data = Data.success(Data.NOOP);
					return data;
				}
			}
			return data;
		} else {
			for (QuestionPage po : questions) {
				if (po.getQuestion().getQuestionType().getId() == type) {
					po.setPoints(points);
					questionPageService.updata(po);
				}
			}
			data = Data.success(Data.NOOP);
			return data;
		}

	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping("/toggle-status/{id}")
	@ResponseBody
	public String toggoleStatus(@PathVariable(name="id")Integer id) {
		Page page = pageService.findById(id);
		if(page != null) {
			int status = page.getStatus();
			switch(status) {
			case 0:page.setStatus(Status.ACTIVED.value());break;
			case 1:page.setStatus(Status.LOCKED.value());break;
			}
			pageService.saveAndFlush(page);
			return "yes";
		}else {
			return "no";
		}
	}
}
\n
./core//admin//controller//QuestionController.java
\n
package com.taolicloud.core.admin.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpSession;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresRoles;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.taolicloud.core.entity.Field;
import com.taolicloud.core.entity.KnowledgePoint;
import com.taolicloud.core.entity.Question;
import com.taolicloud.core.entity.QuestionType;
import com.taolicloud.core.entity.User;
import com.taolicloud.core.entity.util.FileNameUtils;
import com.taolicloud.core.entity.util.Message;
import com.taolicloud.core.entity.util.SetUtil;
import com.taolicloud.core.service.FieldService;
import com.taolicloud.core.service.KnowledgePointService;
import com.taolicloud.core.service.QuestionService;
import com.taolicloud.core.service.QuestionTypeService;
import com.taolicloud.web.bind.Const;
import com.taolicloud.web.view.RequestElement;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className QuestionController
 * @date 2018年3月21日下午12:07:08
 * @desc [试题管理控制层]
 */
@Controller
@RequestMapping("/admin/question")
public class QuestionController {

	@Autowired
	private QuestionService questionService;

	@Autowired
	private FieldService fieldService;

	@Autowired
	private KnowledgePointService knowledgePointService;

	@Autowired
	private QuestionTypeService questionTypeService;

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/add")
	public String add(Model model) {
		List<QuestionType> questionTypes = questionTypeService.findAll();
		List<Field> fields = fieldService.findAll();
		if (fields != null) {
			Field field = fields.get(0);
			List<KnowledgePoint> knowledgePoints = new ArrayList<>();
			knowledgePoints.addAll(knowledgePointService.getKnowledgePointByField(field));
			model.addAttribute("knowledges", knowledgePoints);
		}
		model.addAttribute("questionTypes", questionTypes).addAttribute("fields", fields);
		return "admin/question/add";
	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping(value = "/add", produces = "application/json;charset=UTF-8")
	@ResponseBody
	Message addQuestion(@RequestBody Question question, HttpSession session) {
		User user = (User) session.getAttribute(Const.LOGIN_ADMIN);
		Message message = new Message();
		question.setCreateTime(new Date());
		question.setCreator(user.getUsername());
		try {
			questionService.saveAndFlush(question);
		} catch (Exception e) {
			message.setResult("error");
			message.setMessageInfo(e.getClass().getName());
			e.printStackTrace();
		}
		return message;
	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping(value = "/get-knowledge-point/{fieldId}")
	@ResponseBody
	Message getKnowledges(@PathVariable int fieldId) {
		Message message = new Message();
		HashMap<Integer, String> pointMap = new HashMap<Integer, String>();
		Field field = fieldService.findById(fieldId);
		List<KnowledgePoint> knowledgePoints = new ArrayList<>();
		knowledgePoints.addAll(knowledgePointService.getKnowledgePointByField(field));
		for (KnowledgePoint point : knowledgePoints) {
			pointMap.put(point.getId(), point.getName());
		}
		message.setObject(pointMap);
		return message;
	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping(value = "/upload-img/{num}")
	public String upload_cover(@PathVariable int num, Model model) {
		model.addAttribute("num", num);
		return "admin/question/upload_img";
	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/edit")
	public String edit(Integer id, Model model) {
		Question question = questionService.findById(id);
		List<Field> fields = fieldService.findAll();
		Set<KnowledgePoint> kSet = SetUtil.difference(knowledgePointService.getKnowledgePointByField(question.getField()),question.getKnowledgePoint());
		List<KnowledgePoint> knowledgePoints = new ArrayList<>();
		knowledgePoints.addAll(kSet);
		model.addAttribute("knowledges", knowledgePoints)
			.addAttribute("question", question)
			.addAttribute("fields", fields);
		return "admin/question/edit";
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping("/edit")
	@ResponseBody
	Message edit(@RequestBody Question question) {
		Message message = new Message();
		Question po = questionService.findById(question.getId());
		
		po.setField(question.getField());

		Set<KnowledgePoint> knowledgePoints = po.getKnowledgePoint();
		po.getKnowledgePoint().remove(knowledgePoints);
		knowledgePoints.remove(po);
		knowledgePoints.clear();
		for (KnowledgePoint knowledgePoint : question.getKnowledgePoint()) {
			knowledgePoints.add(knowledgePointService.findById(knowledgePoint.getId()));
		}
		po.setKnowledgePoint(knowledgePoints);

		try {
			questionService.update(po);
		} catch (Exception e) {
			message.setResult("error");
			message.setMessageInfo(e.getClass().getName());
			e.printStackTrace();
		}
		
		return message;
	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping("/upload")
	@ResponseBody
	public String upload(@RequestParam(value = "file") MultipartFile file) {
		try {
			int pos = file.getOriginalFilename().lastIndexOf(".");
			String ext = file.getOriginalFilename().substring(pos);
			String name = FileNameUtils.genFileName() + ext;
			String filePath = Const.LOCAL_SITE_STORAGE + "/img/" + name;
			// System.out.println(filePath);
			file.transferTo(new File(filePath));
			return "{\"url\":\"/ecms/img/" + name + "\"}";
		} catch (IllegalStateException | IOException e) {
			e.printStackTrace();
			System.out.println("no");
			return "{\"url\":\"\"}";
		}

	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/list-{fieldId}-{knowledge}-{questionType}.html")
	public String listByFieldAndPoIntegerAndType(@PathVariable("fieldId") Integer fieldId,
			@PathVariable("knowledge") Integer knowledge, @PathVariable("questionType") Integer questionType,
			RequestElement element, Model model) {
		Sort sort = new Sort(Direction.DESC, "createTime");
		Pageable pageable = new PageRequest(element.getPageNo() - 1, element.getPageSize(), sort);
		Field field = fieldService.findById(fieldId);
		QuestionType qType = questionTypeService.findById(questionType);
		Page<Question> questions = questionService.findByFieldAndKnowledgePointAndQuestionType(field, knowledge, qType,
				pageable);
		int total = questions.getTotalPages();
		int start = element.getPageNo() - 3 > 0 ? element.getPageNo() - 3 : 1;
		int end = element.getPageNo() + 3 < total ? element.getPageNo() + 3 : total;

		List<Field> fields = fieldService.findAll();
		model.addAttribute("fields", fields);
		model.addAttribute("fieldId", fieldId);
		
		List<KnowledgePoint> knowledgePoints = new ArrayList<>();
		if(fieldId == 0) {
			knowledgePoints = knowledgePointService.findAll();
		}else {
			knowledgePoints.addAll(knowledgePointService.getKnowledgePointByField(field));
		}
		model.addAttribute("knowledgePoints", knowledgePoints);
		model.addAttribute("knowledge", knowledge);

		List<QuestionType> questionTypes = questionTypeService.findAll();
		model.addAttribute("questionTypes", questionTypes);
		model.addAttribute("questionType", questionType);

		model.addAttribute("page", questions).addAttribute("start", start).addAttribute("end", end);
		return "admin/question/list";
	}

	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@GetMapping("/view.html/{id}")
	public String view(@PathVariable("id") int id, Model model) {
		Question question = questionService.findById(id);
		Iterator<KnowledgePoint> iterators = question.getKnowledgePoint().iterator();
		List<KnowledgePoint> knowledgePoints = new ArrayList<>();
		while (iterators.hasNext()) {
			knowledgePoints.add(iterators.next());
		}
		model.addAttribute("view", question).addAttribute("knowledgePoint", knowledgePoints);
		return "admin/question/view";
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@DeleteMapping("/delete/{id}")
	@ResponseBody
	Message delete(@PathVariable("id") int id) {
		Message message = new Message();
		Question  question = questionService.findById(id);
		if(question != null) {
			questionService.delete(question);
		}else {
			message.setResult("error");
			message.setMessageInfo("not found the question entity");
		}
		
		return message;
	}
	
	@RequiresRoles(value = {"ADMIN","TEACHER"}, logical= Logical.OR)
	@PostMapping("/deleteBatch")
	@ResponseBody
	public String deleteBatch(Integer...ids) {
		for (Integer id : ids) {
			Question question = questionService.findById(id);
			if(question != null) {
				questionService.delete(question);
			}
		}
		return "ok";
	}
}
\n
./core//admin//controller//UserController.java
\n
package com.taolicloud.core.admin.controller;

import java.util.LinkedList;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresRoles;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taolicloud.core.entity.User;
import com.taolicloud.core.service.UserService;
import com.taolicloud.core.service.impl.PasswordHelper;
import com.taolicloud.web.bind.Const;
import com.taolicloud.web.bind.RoleType;
import com.taolicloud.web.bind.Status;
import com.taolicloud.web.view.RequestElement;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserController
 * @date   2018年3月19日下午2:02:06
 * @desc  [用户管理控制层]
 */
@Controller
@RequestMapping("/admin/user")
public class UserController {

	@Autowired
	private UserService userService;
	
	@Autowired
	private PasswordHelper passwordHelper;
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@GetMapping("/add")
	public String save(Model model) {
		List<RoleType> roles = RoleType.list();
		List<Status> status = new LinkedList<>();
		status.add(Status.ACTIVED);
		status.add(Status.LOCKED);
		model.addAttribute("roles", roles).addAttribute("status", status);
		return "admin/user/add";
	}
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@PostMapping("/add")
	public String save(User user, Model model) {
		
		User tmp = userService.findByUsername(user.getUsername());
		if(tmp==null) {
			user.setTypeName(RoleType.text(user.getTypeId()).toString());
			userService.saveAndFlush(user);
			return "redirect:/admin/user/list";
		}else {
			List<RoleType> roles = RoleType.list();
			List<Status> status = new LinkedList<>();
			status.add(Status.ACTIVED);
			status.add(Status.LOCKED);
			model.addAttribute("roles", roles).addAttribute("status", status).addAttribute("msg", "用户名已用!").addAttribute("user", user);
			return "admin/user/add";
		}
	}
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@DeleteMapping("/delete/{id}")
	@ResponseBody
	public String delete(@PathVariable(name="id")int id) {
		User user = userService.findById(id);
		if(user !=null){
			userService.delete(user);
			return "Y";
		}else {
			return "N";
		}
	}
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@PostMapping(value="/deleteBatch")
	@ResponseBody
	public String deleteBatch(Integer...ids) {
		for (Integer id : ids) {
			User user = userService.findById(id);
			if(user != null) {
				userService.delete(user);
			}
		}
		return "ok";
	}
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@GetMapping("/edit/{id}")
	public String edit(@PathVariable(name="id")Integer id,Model model) {
		User user = userService.findById(id);
		if(user != null){
			model.addAttribute("user", user);
			List<RoleType> roles = RoleType.list();
			List<Status> status = new LinkedList<>();
			status.add(Status.ACTIVED);
			status.add(Status.LOCKED);
			model.addAttribute("roles", roles).addAttribute("status", status);
		}else {
			return "redirect:/admin/user/list";
		}
		return "admin/user/edit";
	}
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@PostMapping("/edit")
	public String edit(User user) {
		User u = userService.findById(user.getId());
		if(u != null) {
			user.setTypeName(RoleType.text(user.getTypeId()).toString());
			
			u.setUsername(user.getUsername());
			u.setRealname(user.getRealname());
			u.setPhone(user.getPhone());
			u.setEmail(user.getEmail());
			u.setProvince(user.getProvince());
			u.setCompany(user.getCompany());
			u.setDepartment(user.getDepartment());
			u.setStatus(user.getStatus());
			u.setTypeId(user.getTypeId());
			u.setTypeName(user.getTypeName());
			userService.upDate(u);
		}
		return "redirect:/admin/user/list";
	}
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@GetMapping("/list")
	public String list(RequestElement element, Model model) {
		Sort sort = new Sort(Direction.DESC, "createTime");
		Pageable pageable = new PageRequest(element.getPageNo()-1, element.getPageSize(), sort);
		Page<User> users = userService.findAll(pageable);
        int total = users.getTotalPages();
        int start = element.getPageNo()-3>0?element.getPageNo()-3:1;
        int end = element.getPageNo()+3<total?element.getPageNo()+3:total;
        model.addAttribute("page", users).addAttribute("start", start).addAttribute("end", end);
        return "admin/user/list";
	}
	
	@RequiresRoles(value = {"ADMIN"}, logical= Logical.OR)
	@PostMapping("/toggle-status/{id}")
	@ResponseBody
	public String toggoleStatus(@PathVariable(name="id")Integer id) {
		User user = userService.findById(id);
		if(user != null) {
			int status = user.getStatus();
			switch(status) {
			case 0:user.setStatus(Status.ACTIVED.value());break;
			case 1:user.setStatus(Status.LOCKED.value());break;
			}
			userService.upDate(user);
			return "yes";
		}else {
			return "no";
		}
	}
	
	@GetMapping("/pwd")
	public String modifyPwd() {
		return "admin/user/pwd";
	}
	
	@GetMapping("/checkpwd")
	@ResponseBody
	public String checkpwd(@RequestParam("pwd")String pwd,HttpSession session) {
		User u = (User)session.getAttribute(Const.LOGIN_ADMIN);
		User user = userService.findById(u.getId());
		String old_pwd = user.getPassword();
		user.setPassword(pwd);
		String new_pwd = passwordHelper.getPassword(user);
		if(new_pwd.equals(old_pwd)) {
			return "{\"state\":\"true\"}";
		}else {
			return "{\"state\":\"false\"}";
		}
	}
	
	@PostMapping("/modifypwd")
	public String modifypwd(@RequestParam("pwd")String pwd,HttpSession session) {
		User u = (User)session.getAttribute(Const.LOGIN_ADMIN);
		User user = userService.findById(u.getId());
		user.setPassword(pwd);
		userService.saveAndFlush(user);
		Subject subject = SecurityUtils.getSubject();
		subject.logout();
		return "redirect:/admin/login";
	}
}
\n
./core//config//CmsMvcConfigure.java
\n
package com.taolicloud.core.config;

import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

import com.taolicloud.http.converter.JSONMessageConvertor;
import com.taolicloud.web.servlet.ExceptionHandler;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [Model View Controller 配置文件]
 */
@Configuration
public class CmsMvcConfigure extends WebMvcConfigurerAdapter{
	
	/* (non-Javadoc)

	 * @see org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter#extendMessageConverters(java.util.List)

	 */
	@Override
	public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {
		converters.add(new JSONMessageConvertor());
		super.extendMessageConverters(converters);
	}

	@Bean
	public CommonsMultipartResolver multipartResolver() {
		CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();
		multipartResolver.setMaxUploadSize(300000);
		multipartResolver.setDefaultEncoding("UTF-8");
		return multipartResolver;
	}
	
	@Bean 
	public ExceptionHandler exceptionResolver() {
		return new ExceptionHandler();
	}

}
\n
./core//config//CmsWebServletConfigure.java
\n
package com.taolicloud.core.config;

import org.springframework.boot.web.servlet.ServletRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.taolicloud.web.servlet.ValidateCodeServlet;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
@Configuration
public class CmsWebServletConfigure {

	@Bean
	public ServletRegistrationBean checkCodeServletBean() {
		return new ServletRegistrationBean(new ValidateCodeServlet(),"/checkcode");
	}
}
\n
./core//config//InterceptorConfigure.java
\n
package com.taolicloud.core.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

import com.taolicloud.web.interceptor.ActionInterceptor;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
@Configuration
public class InterceptorConfigure extends WebMvcConfigurerAdapter {

	/* (non-Javadoc)
	 * @see org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter#addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry)
	 */
	@Override
	public void addInterceptors(InterceptorRegistry registry) {
		registry.addInterceptor(new ActionInterceptor());
		super.addInterceptors(registry);
	}
	
	

}
\n
./core//config//ShiroConfigure.java
\n
package com.taolicloud.core.config;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.servlet.Filter;

import org.apache.shiro.cache.ehcache.EhCacheManager;
import org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO;
import org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator;
import org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler;
import org.apache.shiro.spring.LifecycleBeanPostProcessor;
import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.apache.shiro.web.servlet.SimpleCookie;
import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;
import org.springframework.beans.factory.config.MethodInvokingFactoryBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.taolicloud.auth.shiro.RetryLimitHashedCredentialsMatcher;
import com.taolicloud.auth.shiro.UserRealm;


/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
@Configuration
public class ShiroConfigure {

	@Bean
	public EhCacheManager cacheManager() {
		EhCacheManager cacheManager = new EhCacheManager();
		cacheManager.setCacheManagerConfigFile("classpath:ehcache.xml");
		return cacheManager;
	}
	
	@Bean
	public RetryLimitHashedCredentialsMatcher credentialsMatcher() {
		RetryLimitHashedCredentialsMatcher credentialsMatcher = new RetryLimitHashedCredentialsMatcher(cacheManager());
		credentialsMatcher.setHashAlgorithmName("md5");
		credentialsMatcher.setHashIterations(2);
		credentialsMatcher.setStoredCredentialsHexEncoded(true);
		return credentialsMatcher;
	}
	
	@Bean
	public UserRealm userRealm() {
		UserRealm userRealm = new UserRealm();
		userRealm.setCredentialsMatcher(credentialsMatcher());
		userRealm.setCachingEnabled(true);
		userRealm.setAuthenticationCachingEnabled(true);
		userRealm.setAuthenticationCacheName("authenticationCache");
		userRealm.setAuthorizationCachingEnabled(true);
		userRealm.setAuthorizationCacheName("authorizationCache");
		return userRealm;
	}
	
	@Bean
	public JavaUuidSessionIdGenerator sessionIdGenerator() {
		return new JavaUuidSessionIdGenerator();
	}
	
	@Bean
	public SimpleCookie sessionIdCookie() {
		SimpleCookie simpleCookie = new SimpleCookie("sid");
		simpleCookie.setHttpOnly(true);
		simpleCookie.setMaxAge(180000);
		return simpleCookie;
	}
	
	@Bean
	public EnterpriseCacheSessionDAO sessionDAO() {
		EnterpriseCacheSessionDAO sessionDAO = new EnterpriseCacheSessionDAO();
		sessionDAO.setActiveSessionsCacheName("shiro-activeSessionCache");
		sessionDAO.setSessionIdGenerator(sessionIdGenerator());
		return sessionDAO;
	}
	
	@Bean
	public QuartzSessionValidationScheduler sessionValidationScheduler() {
		QuartzSessionValidationScheduler sessionValidationScheduler = new QuartzSessionValidationScheduler();
		sessionValidationScheduler.setSessionValidationInterval(1800000);
		sessionValidationScheduler.setSessionManager(sessionManager());
		return sessionValidationScheduler;
	}
	
	@Bean
	public DefaultWebSessionManager sessionManager() {
		DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();
		sessionManager.setGlobalSessionTimeout(1800000);
		sessionManager.setDeleteInvalidSessions(true);
		sessionManager.setSessionValidationSchedulerEnabled(true);
		sessionManager.setSessionDAO(sessionDAO());
		sessionManager.setSessionIdCookieEnabled(true);
		sessionManager.setSessionIdCookie(sessionIdCookie());
		return sessionManager;
	}
	
	@Bean
	public DefaultWebSecurityManager securityManager() {
		DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();
		securityManager.setRealm(userRealm());
		securityManager.setSessionManager(sessionManager());
		securityManager.setCacheManager(cacheManager());
		return securityManager;
	}
	
	@Bean
	public MethodInvokingFactoryBean methodInvokingFactoryBean() {
		MethodInvokingFactoryBean methodInvokingFactoryBean = new MethodInvokingFactoryBean();
		methodInvokingFactoryBean.setArguments(securityManager());
		methodInvokingFactoryBean.setStaticMethod("org.apache.shiro.SecurityUtils.setSecurityManager");
		return methodInvokingFactoryBean;
	}
	
	/*@Bean
	public FormAuthenticationFilter formAuthenticationFilter() {
		FormAuthenticationFilter formAuthenticationFilter = new FormAuthenticationFilter();
		formAuthenticationFilter.setUsernameParam("username");
		formAuthenticationFilter.setPasswordParam("password");
		formAuthenticationFilter.setLoginUrl("/admin/login");
		return formAuthenticationFilter;
	}*/
	
	@Bean
	public ShiroFilterFactoryBean shiroFilter() {
		ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();
		
		Map<String, Filter> filters = new HashMap<>();
		/*filters.put("authc", formAuthenticationFilter());*/
		
		Map<String, String> filterChainDefinitionMap = new LinkedHashMap<>();
		filterChainDefinitionMap.put("/static/**", "anon");
		filterChainDefinitionMap.put("/upload/**", "anon");
		filterChainDefinitionMap.put("/admin/login", "anon");
		filterChainDefinitionMap.put("/admin/register", "anon");
		filterChainDefinitionMap.put("/admin/forget/**", "anon");
		filterChainDefinitionMap.put("/checkcode", "anon");
		filterChainDefinitionMap.put("/admin/**", "authc");
		filterChainDefinitionMap.put("/logout", "logout");
		filterChainDefinitionMap.put("/unauthorized", "authc");
		filterChainDefinitionMap.put("/**", "anon");
		
		shiroFilter.setSecurityManager(securityManager());
		shiroFilter.setLoginUrl("/admin/login");
		shiroFilter.setSuccessUrl("/admin/index");
		shiroFilter.setUnauthorizedUrl("/admin/unauthorized");
		shiroFilter.setFilters(filters);
		shiroFilter.setFilterChainDefinitionMap(filterChainDefinitionMap);
		return shiroFilter;
		
	}
	
	@Bean
	LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {
		return new LifecycleBeanPostProcessor();
	}
	
	@Bean
	public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor() {
		AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();
		authorizationAttributeSourceAdvisor.setSecurityManager(securityManager());
		return authorizationAttributeSourceAdvisor;
	}
}
\n
./core//dao//CommentDao.java
\n
package com.taolicloud.core.dao;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

import com.taolicloud.core.entity.Comment;
import com.taolicloud.core.entity.Question;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className CommentDao
 * @date   2018年5月1日下午5:25:34
 * @desc  [用一句话描述改文件的功能]
 */
public interface CommentDao extends JpaRepository<Comment, Integer>, JpaSpecificationExecutor<Comment>{

	List<Comment> findByQuestion(Question index);

}
\n
./core//dao//FieldDao.java
\n
package com.taolicloud.core.dao;

import org.springframework.data.jpa.repository.JpaRepository;

import com.taolicloud.core.entity.Field;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className FieldDao
 * @date   2018年3月21日下午4:45:27
 * @desc  [用一句话描述改文件的功能]
 */
public interface FieldDao extends JpaRepository<Field, Integer>{

}
\n
./core//dao//KnowledgePointDao.java
\n
package com.taolicloud.core.dao;

import java.util.Set;

import org.springframework.data.jpa.repository.JpaRepository;

import com.taolicloud.core.entity.Field;
import com.taolicloud.core.entity.KnowledgePoint;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className KnowledgePointDao
 * @date   2018年3月21日下午4:54:00
 * @desc  [用一句话描述改文件的功能]
 */
public interface KnowledgePointDao extends JpaRepository<KnowledgePoint, Integer>{

	Set<KnowledgePoint> getKnowledgePointByField(Field field);

}
\n
./core//dao//NoticeDao.java
\n
package com.taolicloud.core.dao;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.taolicloud.core.entity.Notice;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className NoticeDao
 * @date   2018年5月7日下午2:22:11
 * @desc  [用一句话描述改文件的功能]
 */
public interface NoticeDao  extends JpaRepository<Notice, Integer>{

	List<Notice> findByStatus(int flag);

}
\n
./core//dao//PageDao.java
\n
package com.taolicloud.core.dao;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.taolicloud.core.entity.Page;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className PageDao
 * @date   2018年4月18日上午10:09:53
 * @desc  [用一句话描述改文件的功能]
 */
public interface PageDao extends JpaRepository<Page, Integer>{

	List<Page> findByStatus(int i);

}
\n
./core//dao//PageHistoryDao.java
\n
package com.taolicloud.core.dao;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

import com.taolicloud.core.entity.Page;
import com.taolicloud.core.entity.PageHistory;
import com.taolicloud.core.entity.User;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className PageHistory
 * @date 2018年5月3日上午11:15:42
 * @desc [用一句话描述改文件的功能]
 */
public interface PageHistoryDao extends JpaRepository<PageHistory, Integer>, JpaSpecificationExecutor<PageHistory>{

	PageHistory findByPageAndUserAndStatus(Page page, User user, Boolean flag);

}
\n
./core//dao//PageTypeDao.java
\n
package com.taolicloud.core.dao;

import org.springframework.data.jpa.repository.JpaRepository;

import com.taolicloud.core.entity.PageType;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className PageTypeDao
 * @date   2018年4月18日下午5:54:02
 * @desc  [用一句话描述改文件的功能]
 */
public interface PageTypeDao extends JpaRepository<PageType, Integer>{

}
\n
./core//dao//QuestionDao.java
\n
package com.taolicloud.core.dao;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

import com.taolicloud.core.entity.Question;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className QuestionDao
 * @date   2018年3月21日下午3:09:43
 * @desc  [用一句话描述改文件的功能]
 */
public interface QuestionDao extends JpaRepository<Question, Integer>, JpaSpecificationExecutor<Question>{


}
\n
./core//dao//QuestionHistoryDao.java
\n
package com.taolicloud.core.dao;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

import com.taolicloud.core.entity.Question;
import com.taolicloud.core.entity.QuestionHistory;
import com.taolicloud.core.entity.User;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className QuestionHistoryDao
 * @date   2018年4月30日下午4:34:33
 * @desc  [用一句话描述改文件的功能]
 */
public interface QuestionHistoryDao extends JpaRepository<QuestionHistory, Integer>, JpaSpecificationExecutor<QuestionHistory>{

	QuestionHistory findByQuestion(Question question);

	QuestionHistory findByUserAndQuestion(User user, Question question);

	List<QuestionHistory> findByUserAndFlag(User user, boolean flag);

}
\n
./core//dao//QuestionPageDao.java
\n
package com.taolicloud.core.dao;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

import com.taolicloud.core.entity.Page;
import com.taolicloud.core.entity.Question;
import com.taolicloud.core.entity.QuestionPage;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className QuestionPageDao
 * @date   2018年4月26日下午2:57:22
 * @desc  [用一句话描述改文件的功能]
 */
public interface QuestionPageDao extends JpaRepository<QuestionPage, Integer>, JpaSpecificationExecutor<QuestionPage>{

	QuestionPage findByPageAndQuestion(Page page, Question question);

	List<QuestionPage> findByPage(Page page);

}
\n
./core//dao//QuestionTypeDao.java
\n
package com.taolicloud.core.dao;

import org.springframework.data.jpa.repository.JpaRepository;

import com.taolicloud.core.entity.QuestionType;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className QuestionTypeDao
 * @date   2018年3月21日下午4:56:09
 * @desc  [用一句话描述改文件的功能]
 */
public interface QuestionTypeDao extends JpaRepository<QuestionType, Integer>{

}
\n
./core//dao//UserDao.java
\n
package com.taolicloud.core.dao;

import org.springframework.data.jpa.repository.JpaRepository;

import com.taolicloud.core.entity.User;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserDao
 * @date   2018年3月16日上午10:02:07
 * @desc  [用一句话描述改文件的功能]
 */
public interface UserDao extends JpaRepository<User, Integer>{
	User findByUsername(String username);
}
\n
./core//entity//Comment.java
\n
package com.taolicloud.core.entity;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className Comment
 * @date 2018年5月1日下午5:20:02
 * @desc [用一句话描述改文件的功能]
 */

@Entity
@Table(name = "ECMS_COMMENT")
public class Comment implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8091008528378921659L;

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;

	@ManyToOne(cascade = { CascadeType.REFRESH }, fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "user_id", nullable = true)
	private User user;

	@Column(name = "question_id")
	private Integer question;

	@Column(name = "create_time")
	private Date createTime;

	@Column(name = "content")
	private String content;

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public Integer getQuestion() {
		return question;
	}

	public void setQuestion(Integer question) {
		this.question = question;
	}

	public Date getCreateTime() {
		return createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}

}\n
./core//entity//Field.java
\n
package com.taolicloud.core.entity;

import java.io.Serializable;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className Field
 * @date 2018年3月21日上午9:14:22
 * @desc [知识库实体类]
 */
@Entity
@Table(name = "ECMS_FIELD")
@JsonIgnoreProperties(ignoreUnknown = true, value = {"hibernateLazyInitializer", "handler", "fieldHandler"})
public class Field implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 7198114443937901951L;

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;

	@Column(name = "name")
	private String name;

	@Column(name = "memo")
	private String memo;

	@Column(name = "status")
	private Integer status;

	@JsonIgnore
	@OneToMany(mappedBy = "field", cascade = CascadeType.REFRESH, fetch = FetchType.LAZY)
	private Set<KnowledgePoint> knowledgePoints;

	@JsonIgnore
	@OneToMany(mappedBy = "field", cascade = CascadeType.REFRESH, fetch = FetchType.LAZY)
	private Set<Question> questions;

	public Field() {
		super();
	}

	public Field(Integer id, String name, String memo, Integer status, Set<KnowledgePoint> knowledgePoints,
			Set<Question> questions) {
		super();
		this.id = id;
		this.name = name;
		this.memo = memo;
		this.status = status;
		this.knowledgePoints = knowledgePoints;
		this.questions = questions;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getMemo() {
		return memo;
	}

	public void setMemo(String memo) {
		this.memo = memo;
	}

	public Integer getStatus() {
		return status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}

	public Set<KnowledgePoint> getKnowledgePoints() {
		return knowledgePoints;
	}

	public void setKnowledgePoints(Set<KnowledgePoint> knowledgePoints) {
		this.knowledgePoints = knowledgePoints;
	}

	public Set<Question> getQuestions() {
		return questions;
	}

	public void setQuestions(Set<Question> questions) {
		this.questions = questions;
	}

}\n
./core//entity//Group.java
\n
package com.taolicloud.core.entity;

import java.io.Serializable;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className Group
 * @date 2018年3月21日上午9:50:05
 * @desc [年级组实体类]
 */
@Entity
@Table(name = "ECMS_GROUP")
@JsonIgnoreProperties(ignoreUnknown = true, value = {"hibernateLazyInitializer", "handler", "fieldHandler"})
public class Group implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -1339992415732002527L;

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int id;

	@Column(name = "name")
	private String name;

	@Column(name = "group_level_id")
	private int groupLevelId;

	@Column(name = "parent")
	private int parent;
	
	@JsonIgnore
	@OneToMany(mappedBy = "group", cascade = CascadeType.REFRESH, fetch = FetchType.LAZY)
	private Set<Question> questions;

	public Group() {
		super();
	}

	public Group(int id, String name, int groupLevelId, int parent, Set<Question> questions) {
		super();
		this.id = id;
		this.name = name;
		this.groupLevelId = groupLevelId;
		this.parent = parent;
		this.questions = questions;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getGroupLevelId() {
		return groupLevelId;
	}

	public void setGroupLevelId(int groupLevelId) {
		this.groupLevelId = groupLevelId;
	}

	public int getParent() {
		return parent;
	}

	public void setParent(int parent) {
		this.parent = parent;
	}

	public Set<Question> getQuestions() {
		return questions;
	}

	public void setQuestions(Set<Question> questions) {
		this.questions = questions;
	}

}
\n
./core//entity//KnowledgePoint.java
\n
package com.taolicloud.core.entity;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className Point
 * @date 2018年3月21日上午10:15:17
 * @desc [知识点实体类]
 */
@Entity
@Table(name = "ECMS_KNOWLEDGEPOINT")
public class KnowledgePoint implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1605041729750346490L;

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;

	@Column(name = "name")
	private String name;

	@ManyToOne(cascade = { CascadeType.REFRESH }, fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "field_id", nullable = true)
	private Field field;

	@Column(name = "memo")
	private String memo;

	@Column(name = "status")
	private int status;

	@JsonIgnore
	@ManyToMany(cascade = CascadeType.MERGE, fetch = FetchType.LAZY, targetEntity = Question.class)
	@JoinTable(name = "TCMS_QUSETION_KNOWLEDGE_POINT", joinColumns = {
			@JoinColumn(name = "knowledge_point_id") }, inverseJoinColumns = { @JoinColumn(name = "question_id") })
	private Set<Question> questions = new HashSet<>();

	public KnowledgePoint() {
		super();
	}

	public KnowledgePoint(Integer id, String name, Field field, String memo, int status, Set<Question> questions) {
		super();
		this.id = id;
		this.name = name;
		this.field = field;
		this.memo = memo;
		this.status = status;
		this.questions = questions;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Field getField() {
		return field;
	}

	public void setField(Field field) {
		this.field = field;
	}

	public String getMemo() {
		return memo;
	}

	public void setMemo(String memo) {
		this.memo = memo;
	}

	public int getStatus() {
		return status;
	}

	public void setStatus(int status) {
		this.status = status;
	}

	public Set<Question> getQuestions() {
		return questions;
	}

	public void setQuestions(Set<Question> questions) {
		this.questions = questions;
	}

}\n
./core//entity//Notice.java
\n
package com.taolicloud.core.entity;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className Notice
 * @date 2018年5月7日下午2:19:38
 * @desc [用一句话描述改文件的功能]
 */
@Entity
@Table(name = "ECMS_NOTICE")
public class Notice implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -841577057948458305L;

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;

	@Column(name = "content")
	private String content;

	@Column(name = "status")
	private int status;

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	public int getStatus() {
		return status;
	}

	public void setStatus(int status) {
		this.status = status;
	}

}
\n
./core//entity//Page.java
\n
package com.taolicloud.core.entity;

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className Page
 * @date 2018年4月17日下午6:00:34
 * @desc [试卷实体类]
 */
@Entity
@Table(name = "ECMS_PAGE")
public class Page implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1511489488751128344L;

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;

	@Column(name = "name")
	private String name;

	@Column(name = "duration")
	private Integer duration;

	@Column(name = "total_point")
	private float totalPoint;

	@Column(name = "pass_point")
	private float passPoint;

	@Column(name = "status")
	private int status;

	@Column(name = "create_time")
	@Temporal(TemporalType.TIMESTAMP)
	private Date createTime;

	@Column(name = "creator")
	private String creator;

	@ManyToOne(cascade = { CascadeType.REFRESH }, fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "page_type_id", nullable = true)
	private PageType pageType;

	@OneToMany(mappedBy = "page", cascade = CascadeType.REFRESH, fetch = FetchType.LAZY)
	private Set<QuestionPage> questionPages = new HashSet<>();

	@OneToMany(mappedBy = "page", cascade = CascadeType.REFRESH, fetch = FetchType.LAZY)
	private Set<PageHistory> pageHistories = new HashSet<>();

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Integer getDuration() {
		return duration;
	}

	public void setDuration(Integer duration) {
		this.duration = duration;
	}

	public float getTotalPoint() {
		return totalPoint;
	}

	public void setTotalPoint(float totalPoint) {
		this.totalPoint = totalPoint;
	}

	public float getPassPoint() {
		return passPoint;
	}

	public void setPassPoint(float passPoint) {
		this.passPoint = passPoint;
	}

	public int getStatus() {
		return status;
	}

	public void setStatus(int status) {
		this.status = status;
	}

	public Date getCreateTime() {
		return createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	public String getCreator() {
		return creator;
	}

	public void setCreator(String creator) {
		this.creator = creator;
	}

	public PageType getPageType() {
		return pageType;
	}

	public void setPageType(PageType pageType) {
		this.pageType = pageType;
	}

	public Set<QuestionPage> getQuestionPages() {
		return questionPages;
	}

	public void setQuestionPages(Set<QuestionPage> questionPages) {
		this.questionPages = questionPages;
	}

	public Set<PageHistory> getPageHistories() {
		return pageHistories;
	}

	public void setPageHistories(Set<PageHistory> pageHistories) {
		this.pageHistories = pageHistories;
	}

}\n
./core//entity//PageHistory.java
\n
package com.taolicloud.core.entity;

import java.io.Serializable;
import java.util.Date;
import java.util.HashMap;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className PageHistory
 * @date 2018年5月3日上午10:38:08
 * @desc [用一句话描述改文件的功能]
 */
@Entity
@Table(name = "ECMS_PAGE_HISTORY")
public class PageHistory implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6488268400323922698L;

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;

	@ManyToOne(cascade = { CascadeType.REFRESH }, fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "user_id", nullable = true)
	private User user;

	@ManyToOne(cascade = { CascadeType.REFRESH }, fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "page_id", nullable = true)
	private Page page;

	@Column(name = "answers")
	private HashMap<Integer, String> answers;

	@Column(name = "counts")
	private Float counts;

	@Column(name = "create_time")
	private Date createTime;

	@Column(name = "status")
	private Boolean status;

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public Page getPage() {
		return page;
	}

	public void setPage(Page page) {
		this.page = page;
	}

	public HashMap<Integer, String> getAnswers() {
		return answers;
	}

	public void setAnswers(HashMap<Integer, String> answers) {
		this.answers = answers;
	}

	public Float getCounts() {
		return counts;
	}

	public void setCounts(Float counts) {
		this.counts = counts;
	}

	public Date getCreateTime() {
		return createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	public Boolean getStatus() {
		return status;
	}

	public void setStatus(Boolean status) {
		this.status = status;
	}

}
\n
./core//entity//PageType.java
\n
package com.taolicloud.core.entity;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className PageType
 * @date   2018年4月18日上午10:04:31
 * @desc  [用一句话描述改文件的功能]
 */
@Entity
@Table(name="ECMS_PAGE_TYPE")
public class PageType implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = -290939061830242635L;

	@Id
	@Column(name="id")
	@GeneratedValue(strategy=GenerationType.AUTO)
	private Integer id;
	
	@Column(name="name")
	private String name;

	@OneToMany(mappedBy="pageType",cascade=CascadeType.REFRESH,fetch=FetchType.LAZY)
	private Set<Page> pages = new HashSet<>();
	
	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Set<Page> getPages() {
		return pages;
	}

	public void setPages(Set<Page> pages) {
		this.pages = pages;
	}
	
}\n
./core//entity//Question.java
\n
package com.taolicloud.core.entity;

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className Question
 * @date 2018年3月21日上午9:19:33
 * @desc [问题实体类]
 */
@Entity
@Table(name = "ECMS_QUESTION")
@JsonIgnoreProperties(ignoreUnknown = true, value = { "hibernateLazyInitializer", "handler", "fieldHandler" })
public class Question implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8293929803246000398L;

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;

	@Column(name = "title")
	private String title;

	@Column(name = "content")
	private String content;

	@Column(name = "title_img")
	private String titleImg;

	@Column(name = "choice_list")
	private LinkedHashMap<String, String> choiceList;

	@Column(name = "choice_img_list")
	private LinkedHashMap<String, String> choiceImgList;

	@Column(name = "points")
	private float points;

	@Column(name = "create_time")
	@Temporal(TemporalType.TIMESTAMP)
	private Date createTime;

	@Column(name = "answer")
	private String answer;

	@ManyToOne(cascade = { CascadeType.REFRESH }, fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "group_id", nullable = true)
	private Group group;

	@ManyToOne(cascade = { CascadeType.REFRESH }, fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "field_id", nullable = true)
	private Field field;

	@ManyToOne(cascade = { CascadeType.REFRESH }, fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "question_type_id", nullable = true)
	private QuestionType questionType;

	@Column(name = "difficulty")
	private float difficulty;

	@Column(name = "analysis", columnDefinition = "longtext COMMENT '问题分析'", nullable = true)
	private String analysis;

	@ManyToMany(cascade = CascadeType.MERGE, fetch = FetchType.LAZY, targetEntity = KnowledgePoint.class)
	@JoinTable(name = "TCMS_QUSETION_KNOWLEDGE_POINT", joinColumns = {
	@JoinColumn(name = "question_id") }, inverseJoinColumns = { @JoinColumn(name = "knowledge_point_id") })
	private Set<KnowledgePoint> knowledgePoint = new HashSet<>();

	@OneToMany(mappedBy = "question", cascade = CascadeType.REFRESH, fetch = FetchType.LAZY)
	private Set<QuestionPage> questionPages = new HashSet<>();

	@OneToMany(mappedBy = "question", cascade = CascadeType.REFRESH, fetch = FetchType.LAZY)
	private Set<QuestionHistory> questionHistories = new HashSet<>();

	@Column(name = "creator")
	private String creator;

	@Column(name = "keyword")
	private String keyword;

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	public String getTitleImg() {
		return titleImg;
	}

	public void setTitleImg(String titleImg) {
		this.titleImg = titleImg;
	}

	public LinkedHashMap<String, String> getChoiceList() {
		return choiceList;
	}

	public void setChoiceList(LinkedHashMap<String, String> choiceList) {
		this.choiceList = choiceList;
	}

	public LinkedHashMap<String, String> getChoiceImgList() {
		return choiceImgList;
	}

	public void setChoiceImgList(LinkedHashMap<String, String> choiceImgList) {
		this.choiceImgList = choiceImgList;
	}

	public float getPoints() {
		return points;
	}

	public void setPoints(float points) {
		this.points = points;
	}

	public Date getCreateTime() {
		return createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	public String getAnswer() {
		return answer;
	}

	public void setAnswer(String answer) {
		this.answer = answer;
	}

	public Group getGroup() {
		return group;
	}

	public void setGroup(Group group) {
		this.group = group;
	}

	public Field getField() {
		return field;
	}

	public void setField(Field field) {
		this.field = field;
	}

	public QuestionType getQuestionType() {
		return questionType;
	}

	public void setQuestionType(QuestionType questionType) {
		this.questionType = questionType;
	}

	public float getDifficulty() {
		return difficulty;
	}

	public void setDifficulty(float difficulty) {
		this.difficulty = difficulty;
	}

	public String getAnalysis() {
		return analysis;
	}

	public void setAnalysis(String analysis) {
		this.analysis = analysis;
	}

	public Set<KnowledgePoint> getKnowledgePoint() {
		return knowledgePoint;
	}

	public void setKnowledgePoint(Set<KnowledgePoint> knowledgePoint) {
		this.knowledgePoint = knowledgePoint;
	}

	public String getCreator() {
		return creator;
	}

	public void setCreator(String creator) {
		this.creator = creator;
	}

	public String getKeyword() {
		return keyword;
	}

	public void setKeyword(String keyword) {
		this.keyword = keyword;
	}

	public Set<QuestionPage> getQuestionPages() {
		return questionPages;
	}

	public void setQuestionPages(Set<QuestionPage> questionPages) {
		this.questionPages = questionPages;
	}

	public Set<QuestionHistory> getQuestionHistories() {
		return questionHistories;
	}

	public void setQuestionHistories(Set<QuestionHistory> questionHistories) {
		this.questionHistories = questionHistories;
	}

}\n
./core//entity//QuestionHistory.java
\n
package com.taolicloud.core.entity;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className QuestionHistory
 * @date 2018年4月29日下午6:13:53
 * @desc [用一句话描述改文件的功能]
 */
@Entity
@Table(name = "ECMS_QUESTION_HISTORY")
public class QuestionHistory implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = 4644492992618959793L;

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;

	@Column(name = "flag")
	private Boolean flag;
	
	@ManyToOne(cascade = { CascadeType.REFRESH }, fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "user_id", nullable = true)
	private User user;

	@ManyToOne(cascade = { CascadeType.REFRESH }, fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "question_id", nullable = true)
	private Question question;

	@Column(name = "commit_time")
	private Date commitTime;
	
	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Boolean getFlag() {
		return flag;
	}

	public void setFlag(Boolean flag) {
		this.flag = flag;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public Question getQuestion() {
		return question;
	}

	public void setQuestion(Question question) {
		this.question = question;
	}

	public Date getCommitTime() {
		return commitTime;
	}

	public void setCommitTime(Date commitTime) {
		this.commitTime = commitTime;
	}
	
}
\n
./core//entity//QuestionPage.java
\n
package com.taolicloud.core.entity;

import java.io.Serializable;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className QuestionPage
 * @date 2018年4月18日上午10:51:17
 * @desc [用一句话描述改文件的功能]
 */
@Entity
@Table(name = "ECMS_QUSETION_PAGE")
public class QuestionPage implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8196350775080031403L;

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;

	@ManyToOne(cascade = { CascadeType.REFRESH }, fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "question_id", nullable = true)
	private Question question;

	@ManyToOne(cascade = { CascadeType.REFRESH }, fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "page_id", nullable = true)
	private Page page;

	@Column(name = "points")
	private float points;

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Question getQuestion() {
		return question;
	}

	public void setQuestion(Question question) {
		this.question = question;
	}

	public Page getPage() {
		return page;
	}

	public void setPage(Page page) {
		this.page = page;
	}

	public float getPoints() {
		return points;
	}

	public void setPoints(float points) {
		this.points = points;
	}
}
\n
./core//entity//QuestionType.java
\n
package com.taolicloud.core.entity;

import java.io.Serializable;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className QuestionType
 * @date 2018年3月21日上午9:40:22
 * @desc [用一句话描述改文件的功能]
 */

@Entity
@Table(name = "ECMS_QUESTIONTYPE")
@JsonIgnoreProperties(ignoreUnknown = true, value = {"hibernateLazyInitializer", "handler", "fieldHandler"})
public class QuestionType implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 680988789498154720L;

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int id;

	@Column(name = "name")
	private String name;

	@JsonIgnore
	@OneToMany(mappedBy = "questionType", cascade = CascadeType.REFRESH, fetch = FetchType.LAZY)
	private Set<Question> questions;

	public QuestionType() {
		super();
	}

	public QuestionType(int id, String name, Set<Question> questions) {
		super();
		this.id = id;
		this.name = name;
		this.questions = questions;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Set<Question> getQuestions() {
		return questions;
	}

	public void setQuestions(Set<Question> questions) {
		this.questions = questions;
	}

}\n
./core//entity//User.java
\n
package com.taolicloud.core.entity;

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className User
 * @date 2018年3月16日上午9:37:30
 * @desc [用户实体类]
 */
@Entity
@Table(name = "ECMS_USER")
public class User implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 2224567088082091306L;

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;

	@Column(name = "username")
	private String username;

	@Column(name = "password")
	private String password;

	@Column(name = "salt")
	private String salt;

	@Column(name = "realname")
	private String realname;

	@Column(name = "email")
	private String email;

	@Column(name = "phone")
	private String phone;

	@Column(name = "status")
	private Integer status;

	@Column(name = "create_time")
	@Temporal(TemporalType.TIMESTAMP)
	private Date createTime;

	@Column(name = "field_id")
	private Integer fieldId;

	@Column(name = "field_name")
	private String fieldName;

	@Column(name = "type_id")
	private Integer typeId;

	@Column(name = "type_name")
	private String typeName;

	@Column(name = "last_login_time")
	@Temporal(TemporalType.TIMESTAMP)
	private Date lastLoginTime;

	@Column(name = "province")
	private String province;

	@Column(name = "company")
	private String company;

	@Column(name = "department")
	private String department;

	@OneToMany(mappedBy = "user", cascade = CascadeType.REFRESH, fetch = FetchType.LAZY)
	private Set<QuestionHistory> questionHistories = new HashSet<>();

	@OneToMany(mappedBy = "user", cascade = CascadeType.REFRESH, fetch = FetchType.LAZY)
	private Set<PageHistory> pageHistories = new HashSet<>();

	@OneToMany(mappedBy = "user", cascade = CascadeType.REFRESH, fetch = FetchType.LAZY)
	private Set<Comment> comments = new HashSet<>();

	public User() {
		super();
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getSalt() {
		return salt;
	}

	public void setSalt(String salt) {
		this.salt = salt;
	}

	public String getRealname() {
		return realname;
	}

	public void setRealname(String realname) {
		this.realname = realname;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public Integer getStatus() {
		return status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}

	public Date getCreateTime() {
		return createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	public Integer getFieldId() {
		return fieldId;
	}

	public void setFieldId(Integer fieldId) {
		this.fieldId = fieldId;
	}

	public Integer getTypeId() {
		return typeId;
	}

	public void setTypeId(Integer typeId) {
		this.typeId = typeId;
	}

	public String getTypeName() {
		return typeName;
	}

	public void setTypeName(String typeName) {
		this.typeName = typeName;
	}

	public String getFieldName() {
		return fieldName;
	}

	public void setFieldName(String fieldName) {
		this.fieldName = fieldName;
	}

	public Date getLastLoginTime() {
		return lastLoginTime;
	}

	public void setLastLoginTime(Date lastLoginTime) {
		this.lastLoginTime = lastLoginTime;
	}

	public String getProvince() {
		return province;
	}

	public void setProvince(String province) {
		this.province = province;
	}

	public String getCompany() {
		return company;
	}

	public void setCompany(String company) {
		this.company = company;
	}

	public String getDepartment() {
		return department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	public String getCredentialsSalt() {
		return username + salt;
	}

	public Set<QuestionHistory> getQuestionHistories() {
		return questionHistories;
	}

	public void setQuestionHistories(Set<QuestionHistory> questionHistories) {
		this.questionHistories = questionHistories;
	}

	public Set<PageHistory> getPageHistories() {
		return pageHistories;
	}

	public void setPageHistories(Set<PageHistory> pageHistories) {
		this.pageHistories = pageHistories;
	}

	public Set<Comment> getComments() {
		return comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}

}\n
./core//entity//util//Data.java
\n
/**
 *  桃李云平台版权声明<br/>
    <center>Copyright (c) 2017 www.taolicloud.com</center> 
 <center> 2018年3月21日下午3:15:02</center>
<center>贵州桃李云科技有限公司拥有本平台的所有资料（包括但不限于文字、图片、音频、视频资料及页面设计、排版、软件等）的版权和/或其他相关知识产权。</center>
<center>未经桃贵州桃李云科技有限公司事先书面许可,对本平台的任何内容、任何单位和个人不得以任何方式复制、转载、链接、转帖、引用、刊登、发表、反编译或者在非桃李云科技所属服务器上做镜像或以其他任何方式使用。</center>
<center>凡侵犯贵州桃李云科技有限公司版权等知识产权的，贵州桃李云科技有限公司将依法追究其法律责任。</center>
 */
package com.taolicloud.core.entity.util;

import java.io.Serializable;
import java.util.ArrayList;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className QuestionFilter
 * @date   2018年3月21日下午3:04:37
 * @desc  [用一句话描述改文件的功能]
 */
public class Data implements Serializable {

	private static final long serialVersionUID = 3708308180295578873L;

	public static int CODE_SUCCESS = 0;

	public static int CODE_FAILURED = -1;

	public static String NOOP = "";

	private int code;

	private String message;

	private Object data;
	
	private ArrayList<Button> links = new ArrayList<>();

	public int getCode() {
		return code;
	}

	public void setCode(int code) {
		this.code = code;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public Object getData() {
		return data;
	}

	public void setData(Object data) {
		this.data = data;
	}

	public ArrayList<Button> getLinks() {
		return links;
	}

	public void setLinks(ArrayList<Button> links) {
		this.links = links;
	}

	private Data(int code, String message, Object data) {
		this.code = code;
		this.message = message;
		this.data = data;
	}

	public static final Data success(Object data) {
		return new Data(Data.CODE_SUCCESS, "操作成功", data);
	}

	public static final Data success(String message, Object data) {
		return new Data(Data.CODE_SUCCESS, message, data);
	}

	public static final Data failured(int code, String message) {
		return new Data(code, message, null);
	}

	public static final Data failured(String message) {
		return failured(Data.CODE_FAILURED, message);
	}

	public Data addLink(String link, String text) {
		links.add(new Button(text, link));
		return this;
	}

	public class Button {
		private String text;
		private String link;

		public Button() {
			super();
		}

		public Button(String text, String link) {
			super();
			this.text = text;
			this.link = link;
		}

		public String getText() {
			return text;
		}

		public void setText(String text) {
			this.text = text;
		}

		public String getLink() {
			return link;
		}

		public void setLink(String link) {
			this.link = link;
		}
	}

}\n
./core//entity//util//FileNameUtils.java
\n
/**
 *  桃李云平台版权声明<br/>
    <center>Copyright (c) 2017 www.taolicloud.com</center> 
 <center> 2018年3月21日下午2:58:06</center>
<center>贵州桃李云科技有限公司拥有本平台的所有资料（包括但不限于文字、图片、音频、视频资料及页面设计、排版、软件等）的版权和/或其他相关知识产权。</center>
<center>未经桃贵州桃李云科技有限公司事先书面许可,对本平台的任何内容、任何单位和个人不得以任何方式复制、转载、链接、转帖、引用、刊登、发表、反编译或者在非桃李云科技所属服务器上做镜像或以其他任何方式使用。</center>
<center>凡侵犯贵州桃李云科技有限公司版权等知识产权的，贵州桃李云科技有限公司将依法追究其法律责任。</center>
 */
package com.taolicloud.core.entity.util;

import java.util.Date;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.time.DateFormatUtils;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className QuestionFilter
 * @date   2018年3月21日下午3:04:37
 * @desc  [用一句话描述改文件的功能]
 */
public class FileNameUtils {
	private static String YYYYMM = "/yyyy/MMdd/";
	private static String DDHHMMSS = "ddHHmmss";
	
	private static String YYYYMMDDHHMMSS = "/yyyy/MMdd/ddHHmmss";
	
	/**
	 * 36个小写字母和数字
	 */
	public static final char[] N36_CHARS = { '0', '1', '2', '3', '4', '5', '6',
			'7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
			'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',
			'x', 'y', 'z' };
	
	/**
	 * 生成当前年月日格式的文件路径
	 * 
	 * yyyyMM 200806
	 * 
	 * @return 结果字符串
	 */
	public static String genPathName() {
		return DateFormatUtils.format(new Date(), YYYYMM);
	}
	
	/**
	 * 生成文件名
	 * 以当前日、时间开头加4位随机数的文件名
	 * 
	 * ddHHmmss 03102230
	 * 
	 * @return 10位长度文件名
	 */
	public static String genFileName() {
		return DateFormatUtils.format(new Date(), DDHHMMSS) + RandomStringUtils.random(4, N36_CHARS);
	}

	/**
	 * 生成文件名
	 * 以当前时间开头加4位随机数的文件名
	 * 
	 * @param ext 文件名后缀，不带'.'
	 * @return 10位长度文件名+文件后缀
	 */
	public static String genFileName(String ext) {
		return genFileName() + "." + ext;
	}
	
	/**
	 * 生成路径和文件名
	 * 以当前时间开头加4位随机数的文件名
	 * 
	 * @param ext 文件名后缀，不带'.'
	 * @return 10位长度文件名+文件后缀
	 */
	public static String genPathAndFileName(String ext) {
		return DateFormatUtils.format(new Date(), YYYYMMDDHHMMSS) + RandomStringUtils.random(4, N36_CHARS) + "." + ext;
	}
}
\n
./core//entity//util//ImageUtils.java
\n
/**
 *  桃李云平台版权声明<br/>
    <center>Copyright (c) 2017 www.taolicloud.com</center> 
 <center> 2018年3月21日下午3:04:23</center>
<center>贵州桃李云科技有限公司拥有本平台的所有资料（包括但不限于文字、图片、音频、视频资料及页面设计、排版、软件等）的版权和/或其他相关知识产权。</center>
<center>未经桃贵州桃李云科技有限公司事先书面许可,对本平台的任何内容、任何单位和个人不得以任何方式复制、转载、链接、转帖、引用、刊登、发表、反编译或者在非桃李云科技所属服务器上做镜像或以其他任何方式使用。</center>
<center>凡侵犯贵州桃李云科技有限公司版权等知识产权的，贵州桃李云科技有限公司将依法追究其法律责任。</center>
 */
package com.taolicloud.core.entity.util;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;

import javax.imageio.ImageIO;

import org.apache.log4j.Logger;

import net.coobird.thumbnailator.Thumbnails;

public class ImageUtils {
	private static Logger log = Logger.getLogger(ImageUtils.class);

    public static void validate(File ori, String dest) throws IOException {
        File destFile = new File(dest);
        if(ori == null) {
            throw new NullPointerException("Source must not be null");
        } else if(dest == null) {
            throw new NullPointerException("Destination must not be null");
        } else if(!ori.exists()) {
            throw new FileNotFoundException("Source \'" + ori + "\' does not exist");
        } else if(ori.isDirectory()) {
            throw new IOException("Source \'" + ori + "\' exists but is a directory");
        } else if(ori.getCanonicalPath().equals(destFile.getCanonicalPath())) {
            throw new IOException("Source \'" + ori + "\' and destination \'" + dest + "\' are the same");
        } else if(destFile.getParentFile() != null && !destFile.getParentFile().exists() && !destFile.getParentFile().mkdirs()) {
            throw new IOException("Destination \'" + dest + "\' directory cannot be created");
        } else if(destFile.exists() && !destFile.canWrite()) {
            throw new IOException("Destination \'" + dest + "\' exists but is read-only");
        }
    }

    /**
     * 下载远程图片到本地，用于第三方登录下载头像
     * @param urlString		图片链接
     * @param savePath		保存路径
     * @throws Exception
     * @author A蛋壳  2015年9月13日 上午9:40:17
     */
    public static void download(String urlString, String savePath) throws Exception {

        URL url = new URL(urlString);	// 构造URL
        URLConnection connection = url.openConnection();	// 打开连接
        connection.setConnectTimeout(5 * 1000);		// 设置请求超时时间
        InputStream is = connection.getInputStream();	// 输入流

        byte[] bs = new byte[1024];		// 1K的数据缓存
        int len;
        File sf = new File(savePath);
        if (sf.getParentFile() != null && sf.getParentFile().exists() == false) {
            if (sf.getParentFile().mkdirs() == false) {
                throw new IOException("Destination '" + savePath + "' directory cannot be created");
            }
        }

        OutputStream os = new FileOutputStream(savePath);
        while((len = is.read(bs)) != -1){
            os.write(bs, 0, len);
        }
        os.close();
        is.close();
    }

    /**
     * 根据最大宽度图片压缩
     *
     * @param ori     原图位置
     * @param dest    目标位置
     * @param maxSize 指定压缩后最大边长
     * @return boolean
     * @throws IOException
     */
    public static boolean scaleImageByWidth(String ori, String dest, int maxSize) throws IOException {
        File oriFile = new File(ori);
        validate(oriFile, dest);

        BufferedImage src = ImageIO.read(oriFile); // 读入文件
        int w = src.getWidth();
        int h = src.getHeight();

        log.debug("origin with/height " + w + "/" + h);

        int size = (int) Math.max(w, h);
        int tow = w;
        int toh = h;

        if (size > maxSize) {
            if (w > maxSize) {
                tow = maxSize;
                toh = h * maxSize / w;
            } else {
                tow = w * maxSize / h;
                toh = maxSize;
            }
        }
        scale(ori, dest, tow, toh);
        return true;
    }

    public static void scale(String ori, String dest, int width, int height) throws IOException {
        File destFile = new File(dest);
        if (destFile.exists()) {
            destFile.delete();
        }
        log.debug("scaled with/height : " + width + "/" + height);
        Thumbnails.of(ori).size(width, height).toFile(dest);
    }

    /**
     * 图片压缩,各个边按比例压缩
     *
     * @param ori     原图位置
     * @param dest    目标位置
     * @param maxSize 指定压缩后最大边长
     * @return boolean
     * @throws IOException
     */
    public static boolean scaleImage(String ori, String dest, int maxSize) throws IOException {
        File oriFile = new File(ori);
        validate(oriFile, dest);

        BufferedImage src = ImageIO.read(oriFile); // 读入文件
        int w = src.getWidth();
        int h = src.getHeight();

        log.debug("origin with/height " + w + "/" + h);

        int size = (int) Math.max(w, h);
        int tow = w;
        int toh = h;

        if (size > maxSize) {
            if (w > maxSize) {
                tow = maxSize;
                toh = h * maxSize / w;
            } else {
                tow = w * maxSize / h;
                toh = maxSize;
            }
        }

        log.debug("scaled with/height : " + tow + "/" + toh);

        scale(ori, dest, tow, toh);

        return true;
    }

    /**
     * 裁剪图片
     *
     * @param ori  源图片路径
     * @param dest 处理后图片路径
     * @param x    起始X坐标
     * @param y    起始Y坐标
     * @param width  裁剪宽度
     * @param height  裁剪高度
     * @return boolean
     *
     * @throws java.io.IOException io异常
     * @throws InterruptedException 中断异常
     */
    public static boolean truncateImage(String ori, String dest, int x, int y, int width, int height) throws IOException, InterruptedException {
        File oriFile = new File(ori);

        validate(oriFile, dest);

        Thumbnails.of(ori).sourceRegion(x, y, width, height).size(width,height).keepAspectRatio(false).toFile(dest);

        return true;
    }

    public static boolean truncateImage(String ori, String dest, int x, int y, int size) throws IOException, InterruptedException {
        return truncateImage(ori, dest, x, y, size, size);
    }
}
\n
./core//entity//util//Message.java
\n
package com.taolicloud.core.entity.util;

import java.io.Serializable;

public class Message implements Serializable {

	private static final long serialVersionUID = -2999571571280318844L;
	private String result = "success";
	private int generatedId;
	private String messageInfo;
	
	private Object object;
	
	public Object getObject() {
		return object;
	}

	public void setObject(Object object) {
		this.object = object;
	}

	public String getMessageInfo() {
		return messageInfo;
	}

	public void setMessageInfo(String messageInfo) {
		this.messageInfo = messageInfo;
	}

	public String getResult() {
		return result;
	}

	public void setResult(String result) {
		this.result = result;
	}

	public int getGeneratedId() {
		return generatedId;
	}

	public void setGeneratedId(int generatedId) {
		this.generatedId = generatedId;
	}
	
	
}
\n
./core//entity//util//Object2Xml.java
\n
package com.taolicloud.core.entity.util;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;



public class Object2Xml {
	public static String toXml(Object obj){
		XStream xstream=new XStream();
		xstream.processAnnotations(obj.getClass());
		
		return xstream.toXML(obj);
	}
	
	public static <T> T toBean(String xmlStr,Class<T> cls){
		XStream xstream=new XStream(new DomDriver());
		xstream.processAnnotations(cls);
		@SuppressWarnings("unchecked")
		T obj=(T)xstream.fromXML(xmlStr);
		return obj;
	}
}
\n
./core//entity//util//Page.java
\n
/**
 *  桃李云平台版权声明<br/>
    <center>Copyright (c) 2017 www.taolicloud.com</center> 
 <center> 2018年3月21日下午3:06:56</center>
<center>贵州桃李云科技有限公司拥有本平台的所有资料（包括但不限于文字、图片、音频、视频资料及页面设计、排版、软件等）的版权和/或其他相关知识产权。</center>
<center>未经桃贵州桃李云科技有限公司事先书面许可,对本平台的任何内容、任何单位和个人不得以任何方式复制、转载、链接、转帖、引用、刊登、发表、反编译或者在非桃李云科技所属服务器上做镜像或以其他任何方式使用。</center>
<center>凡侵犯贵州桃李云科技有限公司版权等知识产权的，贵州桃李云科技有限公司将依法追究其法律责任。</center>
 */
package com.taolicloud.core.entity.util;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className Page
 * @date   2018年3月21日下午3:06:56
 * @desc  [用一句话描述改文件的功能]
 */
public class Page<T> {

	private int pageNo = 1;// 页码，默认是第一页
	private int pageSize = 10;// 每页显示的记录数，默认是10
	private int totalRecord;// 总记录数
	private int totalPage;// 总页数
	private boolean getAllRecord;// 是否获取所有记录
	private List<T> results;// 对应的当前页记录
	private Map<String, Object> params = new HashMap<String, Object>();// 其他的参数我们把它分装成一个Map对象

	public boolean isGetAllRecord() {
		return getAllRecord;
	}

	public void setGetAllRecord(boolean getAllRecord) {
		this.getAllRecord = getAllRecord;
	}

	public int getPageNo() {
		return pageNo;
	}

	public void setPageNo(int pageNo) {

		
		this.pageNo = pageNo;
	}

	public int getPageSize() {
		return pageSize;
	}

	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}

	public int getTotalRecord() {
		return totalRecord;
	}

	public void setTotalRecord(int totalRecord) {
		this.totalRecord = totalRecord;
		// 在设置总页数的时候计算出对应的总页数，在下面的三目运算中加法拥有更高的优先级，所以最后可以不加括号.
		int totalPage = totalRecord % pageSize == 0 ? totalRecord / pageSize
				: totalRecord / pageSize + 1;
		if(totalPage == 0)
			totalPage = 1;
		this.setTotalPage(totalPage);
		if(this.pageNo <=0)
			this.setPageNo(1);
		if(this.pageNo > this.totalPage)
			this.pageNo = this.totalPage;
	}

	public int getTotalPage() {
		return totalPage;
	}

	public void setTotalPage(int totalPage) {
		this.totalPage = totalPage;
	}

	public List<T> getResults() {
		return results;
	}

	public void setResults(List<T> results) {
		this.results = results;
	}

	public Map<String, Object> getParams() {
		return params;
	}

	public void setParams(Map<String, Object> params) {
		this.params = params;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Page [pageNo=").append(pageNo).append(", pageSize=")
				.append(pageSize).append(", results=").append(results)
				.append(", totalPage=").append(totalPage)
				.append(", totalRecord=").append(totalRecord).append("]");
		return builder.toString();
	}
}
\n
./core//entity//util//QuestionFilter.java
\n
/**
 *  桃李云平台版权声明<br/>
    <center>Copyright (c) 2017 www.taolicloud.com</center> 
 <center> 2018年3月21日下午3:04:37</center>
<center>贵州桃李云科技有限公司拥有本平台的所有资料（包括但不限于文字、图片、音频、视频资料及页面设计、排版、软件等）的版权和/或其他相关知识产权。</center>
<center>未经桃贵州桃李云科技有限公司事先书面许可,对本平台的任何内容、任何单位和个人不得以任何方式复制、转载、链接、转帖、引用、刊登、发表、反编译或者在非桃李云科技所属服务器上做镜像或以其他任何方式使用。</center>
<center>凡侵犯贵州桃李云科技有限公司版权等知识产权的，贵州桃李云科技有限公司将依法追究其法律责任。</center>
 */
package com.taolicloud.core.entity.util;

import java.io.Serializable;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className QuestionFilter
 * @date   2018年3月21日下午3:04:37
 * @desc  [用一句话描述改文件的功能]
 */
public class QuestionFilter implements Serializable {

	private static final long serialVersionUID = -8784942836284858739L;

	private int fieldId;

	private int knowledge;

	private int questionType;

	private String searchParam;

	public int getFieldId() {
		return fieldId;
	}

	public void setFieldId(int fieldId) {
		this.fieldId = fieldId;
	}

	public int getKnowledge() {
		return knowledge;
	}

	public void setKnowledge(int knowledge) {
		this.knowledge = knowledge;
	}

	public int getQuestionType() {
		return questionType;
	}

	public void setQuestionType(int questionType) {
		this.questionType = questionType;
	}

	public String getSearchParam() {
		return searchParam;
	}

	public void setSearchParam(String searchParam) {
		this.searchParam = searchParam;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

}\n
./core//entity//util//QuestionImproveResult.java
\n
package com.taolicloud.core.entity.util;

public class QuestionImproveResult {

	private int knowledgePointId;

	private String knowledgePointName;

	private int questionTypeId;

	private String questionTypeName;

	private int amount;

	private int rightTimes;

	private int wrongTimes;

	public int getKnowledgePointId() {
		return knowledgePointId;
	}

	public void setKnowledgePointId(int knowledgePointId) {
		this.knowledgePointId = knowledgePointId;
	}

	public String getKnowledgePointName() {
		return knowledgePointName;
	}

	public void setKnowledgePointName(String knowledgePointName) {
		this.knowledgePointName = knowledgePointName;
	}

	public int getQuestionTypeId() {
		return questionTypeId;
	}

	public void setQuestionTypeId(int questionTypeId) {
		this.questionTypeId = questionTypeId;
	}

	public String getQuestionTypeName() {
		return questionTypeName;
	}

	public void setQuestionTypeName(String questionTypeName) {
		this.questionTypeName = questionTypeName;
	}

	public int getAmount() {
		return amount;
	}

	public void setAmount(int amount) {
		this.amount = amount;
	}

	public int getRightTimes() {
		return rightTimes;
	}

	public void setRightTimes(int rightTimes) {
		this.rightTimes = rightTimes;
	}

	public int getWrongTimes() {
		return wrongTimes;
	}

	public void setWrongTimes(int wrongTimes) {
		this.wrongTimes = wrongTimes;
	}

}\n
./core//entity//util//SetUtil.java
\n
package com.taolicloud.core.entity.util;

import java.util.HashSet;
import java.util.Set;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className QuestionController
 * @date 2018年3月21日下午12:07:08
 * @desc [用一句话描述改文件的功能]
 */
public class SetUtil {

	/**

	 * 获取两个集合的交集

	 * 

	 * @param s1

	 * @param s2

	 * @return

	 */
	public static <T> Set<T> intersection(Set<T> s1, Set<T> s2) {
		Set<T> result = new HashSet<T>(s1);
		result.retainAll(s2);
		return result;
	}

	/**

	 * 求两个集合的并集

	 * 

	 * @param s1

	 * @param s2

	 * @return

	 */
	public static <T> Set<T> union(Set<T> s1, Set<T> s2) {
		Set<T> result = new HashSet<T>(s1);
		result.addAll(s2);
		return result;
	}

	/**

	 * 两个集合的差集

	 * 

	 * @param superset

	 * @param subset

	 * @return

	 */
	public static <T> Set<T> difference(Set<T> superset, Set<T> subset) {
		Set<T> result = new HashSet<T>(superset);
		result.removeAll(subset);
		return result;

	}
}
\n
./core//service//base//SimpleService.java
\n
package com.taolicloud.core.service.base;

import java.io.Serializable;
import java.util.List;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;


/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
public interface SimpleService<T, ID extends Serializable> {
	
	List<T> findAll();

	List<T> findAll(Sort sort);

	List<T> findAll(Iterable<ID> ids);
	
	T findById(ID id);

	<S extends T> List<S> save(Iterable<S> entities);

	<S extends T> S saveAndFlush(S entity);

	<S extends T> void delete(S entity);
	
	void deleteInBatch(Iterable<T> entities);

	<S extends T> List<S> findAll(Example<S> example);

	<S extends T> List<S> findAll(Example<S> example, Sort sort);
	
	Page<T> findAll(Pageable pageable);
}
\n
./core//service//CommentService.java
\n
package com.taolicloud.core.service;

import java.util.List;

import com.taolicloud.core.entity.Comment;
import com.taolicloud.core.service.base.SimpleService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className CommentService
 * @date   2018年5月1日下午5:26:22
 * @desc  [用一句话描述改文件的功能]
 */
public interface CommentService extends SimpleService<Comment, Integer>{

	List<Comment> findByQuestion(Integer index);

}
\n
./core//service//FieldService.java
\n
package com.taolicloud.core.service;

import com.taolicloud.core.entity.Field;
import com.taolicloud.core.service.base.SimpleService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className FieldService
 * @date   2018年3月22日上午9:29:16
 * @desc  [用一句话描述改文件的功能]
 */
public interface FieldService extends SimpleService<Field, Integer>{

}
\n
./core//service//impl//CommentServiceImpl.java
\n
package com.taolicloud.core.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.Order;
import javax.persistence.criteria.Predicate;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.taolicloud.core.dao.CommentDao;
import com.taolicloud.core.entity.Comment;
import com.taolicloud.core.service.CommentService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className CommentServiceImpl
 * @date   2018年5月1日下午5:27:02
 * @desc  [用一句话描述改文件的功能]
 */

@Service("commentService")
public class CommentServiceImpl implements CommentService {

	@Autowired
	private CommentDao commentDao;
	
	@Override
	public List<Comment> findAll() {
		return commentDao.findAll();
	}

	@Override
	public List<Comment> findAll(Sort sort) {
		return commentDao.findAll(sort);
	}

	@Override
	public List<Comment> findAll(Iterable<Integer> ids) {
		return commentDao.findAll(ids);
	}

	@Override
	public Comment findById(Integer id) {
		return commentDao.findOne(id);
	}

	@Override
	public <S extends Comment> List<S> save(Iterable<S> entities) {
		return commentDao.save(entities);
	}

	@Override
	public <S extends Comment> S saveAndFlush(S entity) {
		return commentDao.saveAndFlush(entity);
	}

	@Override
	public <S extends Comment> void delete(S entity) {
		commentDao.delete(entity);
	}

	@Override
	public void deleteInBatch(Iterable<Comment> entities) {
		commentDao.deleteInBatch(entities);
	}

	@Override
	public <S extends Comment> List<S> findAll(Example<S> example) {
		return commentDao.findAll(example);
	}

	@Override
	public <S extends Comment> List<S> findAll(Example<S> example, Sort sort) {
		return commentDao.findAll(example, sort);
	}

	@Override
	public Page<Comment> findAll(Pageable pageable) {
		return commentDao.findAll(pageable);
	}

	@Override
	public List<Comment> findByQuestion(Integer index) {
		List<Comment> list = commentDao.findAll((root, query, builder) -> {

			List<Order> orders = new ArrayList<>();

			orders.add(builder.desc(root.<Long>get("createTime")));
			
			Predicate predicate = builder.conjunction();

			if (index != null && index > 0) {
				predicate.getExpressions().add(
						builder.equal(root.get("question").as(Integer.class), index));
			}
			
			query.orderBy(orders);
			return predicate;
		});
		
		return list;
	}

}\n
./core//service//impl//FieldServiceImpl.java
\n
package com.taolicloud.core.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.taolicloud.core.dao.FieldDao;
import com.taolicloud.core.entity.Field;
import com.taolicloud.core.service.FieldService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className FieldServiceImpl
 * @date   2018年3月22日上午9:29:51
 * @desc  [用一句话描述改文件的功能]
 */
@Service("fieldService")
public class FieldServiceImpl implements FieldService{

	@Autowired
	private FieldDao fieldDao;
	
	@Override
	public List<Field> findAll() {
		return fieldDao.findAll();
	}

	@Override
	public List<Field> findAll(Sort sort) {
		return fieldDao.findAll(sort);
	}

	@Override
	public List<Field> findAll(Iterable<Integer> ids) {
		return fieldDao.findAll(ids);
	}

	@Override
	public Field findById(Integer id) {
		return fieldDao.findOne(id);
	}

	@Override
	public <S extends Field> List<S> save(Iterable<S> entities) {
		return fieldDao.save(entities);
	}

	@Override
	public <S extends Field> S saveAndFlush(S entity) {
		return fieldDao.saveAndFlush(entity);
	}

	@Override
	public <S extends Field> void delete(S entity) {
		fieldDao.delete(entity);
	}

	@Override
	public void deleteInBatch(Iterable<Field> entities) {
		fieldDao.delete(entities);
	}

	@Override
	public <S extends Field> List<S> findAll(Example<S> example) {
		return fieldDao.findAll(example);
	}

	@Override
	public <S extends Field> List<S> findAll(Example<S> example, Sort sort) {
		return fieldDao.findAll(example,sort);
	}

	@Override
	public Page<Field> findAll(Pageable pageable) {
		return fieldDao.findAll(pageable);
	}
	
}\n
./core//service//impl//KnowledgePointServiceImpl.java
\n
package com.taolicloud.core.service.impl;

import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.taolicloud.core.dao.KnowledgePointDao;
import com.taolicloud.core.entity.Field;
import com.taolicloud.core.entity.KnowledgePoint;
import com.taolicloud.core.service.KnowledgePointService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className KnowledgeServiceImpl
 * @date   2018年3月22日上午11:40:38
 * @desc  [用一句话描述改文件的功能]
 */
@Service("knowledgePointService")
public class KnowledgePointServiceImpl implements KnowledgePointService{

	@Autowired
	private KnowledgePointDao knowledgePointDao;
	
	@Override
	public List<KnowledgePoint> findAll() {
		return knowledgePointDao.findAll();
	}

	@Override
	public List<KnowledgePoint> findAll(Sort sort) {
		return knowledgePointDao.findAll(sort);
	}

	@Override
	public List<KnowledgePoint> findAll(Iterable<Integer> ids) {
		return knowledgePointDao.findAll(ids);
	}

	@Override
	public KnowledgePoint findById(Integer id) {
		return knowledgePointDao.findOne(id);
	}

	@Override
	public <S extends KnowledgePoint> List<S> save(Iterable<S> entities) {
		return knowledgePointDao.save(entities);
	}

	@Override
	public <S extends KnowledgePoint> S saveAndFlush(S entity) {
		return knowledgePointDao.saveAndFlush(entity);
	}

	@Override
	public <S extends KnowledgePoint> void delete(S entity) {
		knowledgePointDao.delete(entity);
	}

	@Override
	public void deleteInBatch(Iterable<KnowledgePoint> entities) {
		knowledgePointDao.delete(entities);
	}

	@Override
	public <S extends KnowledgePoint> List<S> findAll(Example<S> example) {
		return knowledgePointDao.findAll(example);
	}

	@Override
	public <S extends KnowledgePoint> List<S> findAll(Example<S> example, Sort sort) {
		return knowledgePointDao.findAll(example,sort);
	}

	@Override
	public Page<KnowledgePoint> findAll(Pageable pageable) {
		return knowledgePointDao.findAll(pageable);
	}

	@Override
	public Set<KnowledgePoint> getKnowledgePointByField(Field field) {
		return knowledgePointDao.getKnowledgePointByField(field);
	}

}\n
./core//service//impl//NoticeServiceImpl.java
\n
package com.taolicloud.core.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.taolicloud.core.dao.NoticeDao;
import com.taolicloud.core.entity.Notice;
import com.taolicloud.core.service.NoticeService;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className NoticeServiceImpl
 * @date 2018年5月7日下午2:24:15
 * @desc [用一句话描述改文件的功能]
 */
@Service("noticeService")
public class NoticeServiceImpl implements NoticeService {

	@Autowired
	private NoticeDao noticeDao;

	@Override
	public List<Notice> findAll() {
		return noticeDao.findAll();
	}

	@Override
	public List<Notice> findAll(Sort sort) {
		return noticeDao.findAll(sort);
	}

	@Override
	public List<Notice> findAll(Iterable<Integer> ids) {
		return noticeDao.findAll(ids);
	}

	@Override
	public Notice findById(Integer id) {
		return noticeDao.findOne(id);
	}

	@Override
	public <S extends Notice> List<S> save(Iterable<S> entities) {
		return noticeDao.save(entities);
	}

	@Override
	public <S extends Notice> S saveAndFlush(S entity) {
		return noticeDao.saveAndFlush(entity);
	}

	@Override
	public <S extends Notice> void delete(S entity) {
		noticeDao.delete(entity);
	}

	@Override
	public void deleteInBatch(Iterable<Notice> entities) {
		noticeDao.deleteInBatch(entities);
	}

	@Override
	public <S extends Notice> List<S> findAll(Example<S> example) {
		return noticeDao.findAll(example);
	}

	@Override
	public <S extends Notice> List<S> findAll(Example<S> example, Sort sort) {
		return noticeDao.findAll(example, sort);
	}

	@Override
	public Page<Notice> findAll(Pageable pageable) {
		return noticeDao.findAll(pageable);
	}

	@Override
	public List<Notice> findByFlag(Integer flag) {
		return noticeDao.findByStatus(flag);
	}

}\n
./core//service//impl//PageHistoryServiceImpl.java
\n
package com.taolicloud.core.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.Order;
import javax.persistence.criteria.Predicate;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.taolicloud.core.dao.PageHistoryDao;
import com.taolicloud.core.entity.PageHistory;
import com.taolicloud.core.entity.User;
import com.taolicloud.core.service.PageHistoryService;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className PageHistoryServiceImpl
 * @date 2018年5月3日上午11:18:00
 * @desc [用一句话描述改文件的功能]
 */
@Service("pageHistoryService")
public class PageHistoryServiceImpl implements PageHistoryService {

	@Autowired
	private PageHistoryDao historyDao;

	@Override
	public List<PageHistory> findAll() {
		return historyDao.findAll();
	}

	@Override
	public List<PageHistory> findAll(Sort sort) {
		return historyDao.findAll(sort);
	}

	@Override
	public List<PageHistory> findAll(Iterable<Integer> ids) {
		return historyDao.findAll(ids);
	}

	@Override
	public PageHistory findById(Integer id) {
		return historyDao.findOne(id);
	}

	@Override
	public <S extends PageHistory> List<S> save(Iterable<S> entities) {
		return historyDao.save(entities);
	}

	@Override
	public <S extends PageHistory> S saveAndFlush(S entity) {
		return historyDao.saveAndFlush(entity);
	}

	@Override
	public <S extends PageHistory> void delete(S entity) {
		historyDao.delete(entity);
	}

	@Override
	public void deleteInBatch(Iterable<PageHistory> entities) {
		historyDao.deleteInBatch(entities);
	}

	@Override
	public <S extends PageHistory> List<S> findAll(Example<S> example) {
		return historyDao.findAll(example);
	}

	@Override
	public <S extends PageHistory> List<S> findAll(Example<S> example, Sort sort) {
		return historyDao.findAll(example, sort);
	}

	@Override
	public Page<PageHistory> findAll(Pageable pageable) {
		return historyDao.findAll(pageable);
	}

	@Override
	public PageHistory findByPageAndUserAndStatus(com.taolicloud.core.entity.Page page, User user, Boolean flag) {
		return historyDao.findByPageAndUserAndStatus(page, user, flag);
	}

	@Override
	public List<PageHistory> findAllByPageAndUserAndStatus(com.taolicloud.core.entity.Page page, User user, Boolean flag) {
		List<PageHistory> pageHistories = historyDao.findAll((root, query, builder) -> {

			List<Order> orders = new ArrayList<>();

			orders.add(builder.asc(root.<Long>get("id")));

			Predicate predicate = builder.conjunction();

			if (page != null && page.getId() > 0) {
				predicate.getExpressions().add(
						builder.equal(root.get("page").as(com.taolicloud.core.entity.Page.class), page));
			}
			
			if (user != null && user.getId() > 0) {
				predicate.getExpressions().add(
						builder.equal(root.get("user").as(User.class), user));
			}
			
			predicate.getExpressions().add(
					builder.equal(root.get("status").as(Boolean.class), flag));
			
			query.orderBy(orders);
			return predicate;
		});
		return pageHistories;
	}
}\n
./core//service//impl//PageServiceImpl.java
\n
package com.taolicloud.core.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.taolicloud.core.dao.PageDao;
import com.taolicloud.core.entity.Page;
import com.taolicloud.core.service.PageService;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className PageServiceImpl
 * @date 2018年4月18日上午10:08:58
 * @desc [用一句话描述改文件的功能]
 */
@Service("pageService")
public class PageServiceImpl implements PageService {

	@Autowired
	private PageDao pageDao;

	@Override
	public List<Page> findAll() {
		return pageDao.findAll();
	}

	@Override
	public List<Page> findAll(Sort sort) {
		return pageDao.findAll(sort);
	}

	@Override
	public List<Page> findAll(Iterable<Integer> ids) {
		return pageDao.findAll(ids);
	}

	@Override
	public Page findById(Integer id) {
		return pageDao.findOne(id);
	}

	@Override
	public <S extends Page> List<S> save(Iterable<S> entities) {
		return pageDao.save(entities);
	}

	@Override
	public <S extends Page> S saveAndFlush(S entity) {
		return pageDao.saveAndFlush(entity);
	}

	@Override
	public <S extends Page> void delete(S entity) {
		pageDao.delete(entity);
	}

	@Override
	public void deleteInBatch(Iterable<Page> entities) {
		pageDao.deleteInBatch(entities);
	}

	@Override
	public <S extends Page> List<S> findAll(Example<S> example) {
		return pageDao.findAll(example);
	}

	@Override
	public <S extends Page> List<S> findAll(Example<S> example, Sort sort) {
		return pageDao.findAll(example, sort);
	}

	@Override
	public org.springframework.data.domain.Page<Page> findAll(Pageable pageable) {
		return pageDao.findAll(pageable);
	}

	@Override
	public List<Page> findByStatus(int i) {
		return pageDao.findByStatus(i);
	}

}\n
./core//service//impl//PageTypeServiceImpl.java
\n
package com.taolicloud.core.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.taolicloud.core.dao.PageTypeDao;
import com.taolicloud.core.entity.PageType;
import com.taolicloud.core.service.PageTypeService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className PageTypeServiceImpl
 * @date   2018年4月18日下午5:55:29
 * @desc  [用一句话描述改文件的功能]
 */
@Service("pageTypeService")
public class PageTypeServiceImpl implements PageTypeService {

	@Autowired
	private PageTypeDao pageTypeDao;
	@Override
	public List<PageType> findAll() {
		return pageTypeDao.findAll();
	}

	@Override
	public List<PageType> findAll(Sort sort) {
		return pageTypeDao.findAll(sort);
	}

	@Override
	public List<PageType> findAll(Iterable<Integer> ids) {
		return pageTypeDao.findAll(ids);
	}

	@Override
	public PageType findById(Integer id) {
		return pageTypeDao.findOne(id);
	}

	@Override
	public <S extends PageType> List<S> save(Iterable<S> entities) {
		return pageTypeDao.save(entities);
	}

	@Override
	public <S extends PageType> S saveAndFlush(S entity) {
		return pageTypeDao.saveAndFlush(entity);
	}

	@Override
	public <S extends PageType> void delete(S entity) {
		pageTypeDao.delete(entity);
	}

	@Override
	public void deleteInBatch(Iterable<PageType> entities) {
		pageTypeDao.deleteInBatch(entities);
	}

	@Override
	public <S extends PageType> List<S> findAll(Example<S> example) {
		return pageTypeDao.findAll(example);
	}

	@Override
	public <S extends PageType> List<S> findAll(Example<S> example, Sort sort) {
		return pageTypeDao.findAll(example,sort);
	}

	@Override
	public Page<PageType> findAll(Pageable pageable) {
		return pageTypeDao.findAll(pageable);
	}

}
\n
./core//service//impl//PasswordHelper.java
\n
package com.taolicloud.core.service.impl;

import org.apache.shiro.crypto.RandomNumberGenerator;
import org.apache.shiro.crypto.SecureRandomNumberGenerator;
import org.apache.shiro.crypto.hash.SimpleHash;
import org.apache.shiro.util.ByteSource;
import org.springframework.stereotype.Component;

import com.taolicloud.core.entity.User;


/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
@Component("passwordHelper")
public class PasswordHelper {
	
	private RandomNumberGenerator randomNumberGenerator = new SecureRandomNumberGenerator();
	
	private String algorithmName = "md5";
	
	private int hashIterations = 2;

	public void setRandomNumberGenerator(RandomNumberGenerator randomNumberGenerator) {
		this.randomNumberGenerator = randomNumberGenerator;
	}

	public void setAlgorithmName(String algorithmName) {
		this.algorithmName = algorithmName;
	}

	public void setHashIterations(int hashIterations) {
		this.hashIterations = hashIterations;
	}
	
	public void encryptPassword(User user){
		user.setSalt(randomNumberGenerator.nextBytes().toHex());
		String newPassword = new SimpleHash(
				algorithmName,
				user.getPassword(),
				ByteSource.Util.bytes(user.getCredentialsSalt()),
				hashIterations).toHex();
		user.setPassword(newPassword);
	}
	
	public String getPassword(User user){
		String newPassword = new SimpleHash(
				algorithmName,
				user.getPassword(),
				ByteSource.Util.bytes(user.getCredentialsSalt()),
				hashIterations).toHex();
		user.setPassword(newPassword);
		return user.getPassword();
	}
}
\n
./core//service//impl//QuestionHistoryServiceImpl.java
\n
package com.taolicloud.core.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.taolicloud.core.dao.QuestionHistoryDao;
import com.taolicloud.core.entity.Question;
import com.taolicloud.core.entity.QuestionHistory;
import com.taolicloud.core.entity.User;
import com.taolicloud.core.service.QuestionHistoryService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className QuestionHistoryServiceImpl
 * @date   2018年4月30日下午4:56:28
 * @desc  [用一句话描述改文件的功能]
 */
@Service("questionHist")
public class QuestionHistoryServiceImpl implements QuestionHistoryService{

	@Autowired
	private QuestionHistoryDao historyDao;
	
	@Override
	public List<QuestionHistory> findAll() {
		return historyDao.findAll();
	}

	@Override
	public List<QuestionHistory> findAll(Sort sort) {
		return historyDao.findAll(sort);
	}

	@Override
	public List<QuestionHistory> findAll(Iterable<Integer> ids) {
		return historyDao.findAll(ids);
	}

	@Override
	public QuestionHistory findById(Integer id) {
		return historyDao.findOne(id);
	}

	@Override
	public <S extends QuestionHistory> List<S> save(Iterable<S> entities) {
		return historyDao.save(entities);
	}

	@Override
	public <S extends QuestionHistory> S saveAndFlush(S entity) {
		return historyDao.saveAndFlush(entity);
	}

	@Override
	public <S extends QuestionHistory> void delete(S entity) {
		historyDao.delete(entity);
	}

	@Override
	public void deleteInBatch(Iterable<QuestionHistory> entities) {
		historyDao.deleteInBatch(entities);
	}

	@Override
	public <S extends QuestionHistory> List<S> findAll(Example<S> example) {
		return historyDao.findAll(example);
	}

	@Override
	public <S extends QuestionHistory> List<S> findAll(Example<S> example, Sort sort) {
		return historyDao.findAll(example,sort);
	}

	@Override
	public Page<QuestionHistory> findAll(Pageable pageable) {
		return historyDao.findAll(pageable);
	}

	@Override
	public QuestionHistory findByQuestion(Question question) {
		return historyDao.findByQuestion(question);
	}

	@Override
	public QuestionHistory findByUserAndQuestion(User user, Question question) {
		return historyDao.findByUserAndQuestion(user, question);
	}

	@Override
	public List<QuestionHistory> findByUserAndFlag(User user, boolean flag) {
		return historyDao.findByUserAndFlag(user,flag);
	}

}\n
./core//service//impl//QuestionPageServiceImpl.java
\n
package com.taolicloud.core.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.taolicloud.core.dao.QuestionPageDao;
import com.taolicloud.core.entity.Question;
import com.taolicloud.core.entity.QuestionPage;
import com.taolicloud.core.service.PageService;
import com.taolicloud.core.service.QuestionPageService;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className QuestionPageServiceImpl
 * @date 2018年4月26日下午2:59:12
 * @desc [用一句话描述改文件的功能]
 */
@Service("questionPage")
public class QuestionPageServiceImpl implements QuestionPageService {

	@Autowired
	private QuestionPageDao questionPageDao;

	@Autowired
	private PageService pageService;
	
	@Override
	public List<QuestionPage> findAll() {
		return questionPageDao.findAll();
	}

	@Override
	public List<QuestionPage> findAll(Sort sort) {
		return questionPageDao.findAll(sort);
	}

	@Override
	public List<QuestionPage> findAll(Iterable<Integer> ids) {
		return questionPageDao.findAll(ids);
	}

	@Override
	public QuestionPage findById(Integer id) {
		return questionPageDao.findOne(id);
	}

	@Override
	public <S extends QuestionPage> List<S> save(Iterable<S> entities) {
		return questionPageDao.save(entities);
	}

	@Override
	public <S extends QuestionPage> S saveAndFlush(S entity) {
		QuestionPage questionPage = questionPageDao.findByPageAndQuestion(entity.getPage(), entity.getQuestion());
		if (questionPage == null) {
			return questionPageDao.saveAndFlush(entity);
		} else {
			return null;
		}
	}
	
	@Override
	public void updata(QuestionPage po) {
		questionPageDao.save(po);
	}

	@Override
	public <S extends QuestionPage> void delete(S entity) {
		questionPageDao.delete(entity);
	}

	@Override
	public void deleteInBatch(Iterable<QuestionPage> entities) {
		questionPageDao.delete(entities);
	}

	@Override
	public <S extends QuestionPage> List<S> findAll(Example<S> example) {
		return questionPageDao.findAll(example);
	}

	@Override
	public <S extends QuestionPage> List<S> findAll(Example<S> example, Sort sort) {
		return questionPageDao.findAll(example, sort);
	}

	@Override
	public Page<QuestionPage> findAll(Pageable pageable) {
		return questionPageDao.findAll(pageable);
	}

	@Override
	public List<QuestionPage> findByPage(Integer pid) {
		com.taolicloud.core.entity.Page page = pageService.findById(pid);
		return questionPageDao.findByPage(page);
	}

	@Override
	public QuestionPage findByPageAndQuestion(com.taolicloud.core.entity.Page page, Question question) {
		return questionPageDao.findByPageAndQuestion(page,question);
	}

}\n
./core//service//impl//QuestionServiceImpl.java
\n
package com.taolicloud.core.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.Order;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.SetJoin;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.taolicloud.core.dao.QuestionDao;
import com.taolicloud.core.entity.Field;
import com.taolicloud.core.entity.KnowledgePoint;
import com.taolicloud.core.entity.Question;
import com.taolicloud.core.entity.QuestionType;
import com.taolicloud.core.service.QuestionService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className QuestionServiceImpl
 * @date   2018年3月21日下午3:08:52
 * @desc  [用一句话描述改文件的功能]
 */
@Service("questionService")
public class QuestionServiceImpl implements QuestionService{

	@Autowired
	private QuestionDao questionDao;
	
	@Override
	public List<Question> findAll() {
		return questionDao.findAll();
	}

	@Override
	public List<Question> findAll(Sort sort) {
		return questionDao.findAll(sort);
	}

	@Override
	public List<Question> findAll(Iterable<Integer> ids) {
		return questionDao.findAll(ids);
	}

	@Override
	public Question findById(Integer id) {
		return questionDao.findOne(id);
	}

	@Override
	public <S extends Question> List<S> save(Iterable<S> entities) {
		return questionDao.save(entities);
	}

	@Override
	@Transactional
	public <S extends Question> S saveAndFlush(S entity) {
		return questionDao.saveAndFlush(entity);
	}

	@Override
	public <S extends Question> void delete(S entity) {
		questionDao.delete(entity);
	}

	@Override
	public void deleteInBatch(Iterable<Question> entities) {
		questionDao.deleteInBatch(entities);
	}

	@Override
	public <S extends Question> List<S> findAll(Example<S> example) {
		return questionDao.findAll(example);
	}

	@Override
	public <S extends Question> List<S> findAll(Example<S> example, Sort sort) {
		return questionDao.findAll(example,sort);
	}

	@Override
	public Page<Question> findAll(Pageable pageable) {
		return questionDao.findAll(pageable);
	}

	@Override
	public Page<Question> findByFieldAndKnowledgePointAndQuestionType(Field field, Integer knowledgePoint, QuestionType type, Pageable pageable) {
		Page<Question> page = questionDao.findAll((root, query, builder) -> {

			List<Order> orders = new ArrayList<>();

			orders.add(builder.asc(root.<Long>get("id")));

			Predicate predicate = builder.conjunction();

			if (field != null && field.getId() > 0) {
				predicate.getExpressions().add(
						builder.equal(root.get("field").as(Field.class), field));
			}
			
			if (knowledgePoint != null && knowledgePoint > 0) {
				SetJoin<Question,KnowledgePoint> depJoin = root.join(root.getModel().getSet("knowledgePoint",KnowledgePoint.class));  
				predicate.getExpressions().add(
						builder.equal(depJoin.get("id").as(Integer.class), knowledgePoint));
			}
			if (type != null && type.getId() > 0) {
				predicate.getExpressions().add(
						builder.equal(root.get("questionType").as(QuestionType.class), type));
			}
			query.orderBy(orders);
			return predicate;
		}, pageable);
		
		return page;
	}

	@Override
	public List<Question> findAllByFieldAndKnowledgePointAndQuestionType(Field field, Integer knowledgePoint,
			QuestionType type) {
		List<Question> questions = questionDao.findAll((root, query, builder) -> {

			List<Order> orders = new ArrayList<>();

			orders.add(builder.asc(root.<Long>get("id")));

			Predicate predicate = builder.conjunction();

			if (field != null && field.getId() > 0) {
				predicate.getExpressions().add(
						builder.equal(root.get("field").as(Field.class), field));
			}
			
			if (knowledgePoint != null && knowledgePoint > 0) {
				SetJoin<Question,KnowledgePoint> depJoin = root.join(root.getModel().getSet("knowledgePoint",KnowledgePoint.class));  
				predicate.getExpressions().add(
						builder.equal(depJoin.get("id").as(Integer.class), knowledgePoint));
			}
			if (type != null && type.getId() > 0) {
				predicate.getExpressions().add(
						builder.equal(root.get("questionType").as(QuestionType.class), type));
			}
			query.orderBy(orders);
			return predicate;
		});
		return questions;
	}
	
	@Override
	@Transactional
	public void update(Question po) {
		questionDao.save(po);
	}

}
\n
./core//service//impl//QusetionTypeServiceImpl.java
\n
package com.taolicloud.core.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.taolicloud.core.dao.QuestionTypeDao;
import com.taolicloud.core.entity.QuestionType;
import com.taolicloud.core.service.QuestionTypeService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className QusetionTypeServiceImpl
 * @date   2018年3月23日上午10:29:01
 * @desc  [用一句话描述改文件的功能]
 */
@Service("questionTypeService")
public class QusetionTypeServiceImpl implements QuestionTypeService{

	@Autowired
	private QuestionTypeDao questionTypeDao;
	
	@Override
	public List<QuestionType> findAll() {
		return questionTypeDao.findAll();
	}

	@Override
	public List<QuestionType> findAll(Sort sort) {
		return questionTypeDao.findAll(sort);
	}

	@Override
	public List<QuestionType> findAll(Iterable<Integer> ids) {
		return questionTypeDao.findAll(ids);
	}

	@Override
	public QuestionType findById(Integer id) {
		return questionTypeDao.findOne(id);
	}

	@Override
	public <S extends QuestionType> List<S> save(Iterable<S> entities) {
		return questionTypeDao.save(entities);
	}

	@Override
	public <S extends QuestionType> S saveAndFlush(S entity) {
		return questionTypeDao.saveAndFlush(entity);
	}

	@Override
	public <S extends QuestionType> void delete(S entity) {
		questionTypeDao.delete(entity);
	}

	@Override
	public void deleteInBatch(Iterable<QuestionType> entities) {
		questionTypeDao.deleteInBatch(entities);
	}

	@Override
	public <S extends QuestionType> List<S> findAll(Example<S> example) {
		return questionTypeDao.findAll(example);
	}

	@Override
	public <S extends QuestionType> List<S> findAll(Example<S> example, Sort sort) {
		return questionTypeDao.findAll(example,sort);
	}

	@Override
	public Page<QuestionType> findAll(Pageable pageable) {
		return questionTypeDao.findAll(pageable);
	}

}
\n
./core//service//impl//UserServiceImpl.java
\n
package com.taolicloud.core.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.taolicloud.core.dao.UserDao;
import com.taolicloud.core.entity.User;
import com.taolicloud.core.service.UserService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
@Service("userService")
public class UserServiceImpl implements UserService{
	
	@Autowired
	private UserDao userDao;
	
	@Autowired
	private PasswordHelper passwordHelper;	

	/* (non-Javadoc)
	 * @see com.taolicloud.core.service.base.SimpleService#findAll()
	 */
	@Override
	public List<User> findAll() {
		return userDao.findAll();
	}

	/* (non-Javadoc)
	 * @see com.taolicloud.core.service.base.SimpleService#findAll(org.springframework.data.domain.Sort)
	 */
	@Override
	public List<User> findAll(Sort sort) {
		return userDao.findAll(sort);
	}

	/* (non-Javadoc)
	 * @see com.taolicloud.core.service.base.SimpleService#findAll(java.lang.Iterable)
	 */
	@Override
	public List<User> findAll(Iterable<Integer> ids) {
		return userDao.findAll(ids);
	}

	/* (non-Javadoc)
	 * @see com.taolicloud.core.service.base.SimpleService#findById(java.io.Serializable)
	 */
	@Override
	public User findById(Integer id) {
		return userDao.findOne(id);
	}

	/* (non-Javadoc)
	 * @see com.taolicloud.core.service.base.SimpleService#save(java.lang.Iterable)
	 */
	@Override
	public <S extends User> List<S> save(Iterable<S> entities) {
		for(User u:entities) {
			passwordHelper.encryptPassword(u);
			u.setCreateTime(new Date());
		}
		return userDao.save(entities);
	}

	/* (non-Javadoc)
	 * @see com.taolicloud.core.service.base.SimpleService#saveAndFlush(java.lang.Object)
	 */
	@Override
	public <S extends User> S saveAndFlush(S entity) {
		passwordHelper.encryptPassword(entity);
		entity.setCreateTime(new Date());
		return userDao.saveAndFlush(entity);
	}

	/* (non-Javadoc)
	 * @see com.taolicloud.core.service.base.SimpleService#delete(java.lang.Object)
	 */
	@Override
	public <S extends User> void delete(S entity) {
		userDao.delete(entity);
	}

	/* (non-Javadoc)
	 * @see com.taolicloud.core.service.base.SimpleService#deleteInBatch(java.lang.Iterable)
	 */
	@Override
	public void deleteInBatch(Iterable<User> entities) {
		userDao.deleteInBatch(entities);
	}

	/* (non-Javadoc)
	 * @see com.taolicloud.core.service.base.SimpleService#findAll(org.springframework.data.domain.Example)
	 */
	@Override
	public <S extends User> List<S> findAll(Example<S> example) {
		return userDao.findAll(example);
	}

	/* (non-Javadoc)
	 * @see com.taolicloud.core.service.base.SimpleService#findAll(org.springframework.data.domain.Example, org.springframework.data.domain.Sort)
	 */
	@Override
	public <S extends User> List<S> findAll(Example<S> example, Sort sort) {
		return userDao.findAll(example, sort);
	}

	/* (non-Javadoc)
	 * @see com.taolicloud.core.service.base.SimpleService#findAll(org.springframework.data.domain.Pageable)
	 */
	@Override
	public Page<User> findAll(Pageable pageable) {
		return userDao.findAll(pageable);
	}

	/* (non-Javadoc)
	 * @see com.taolicloud.core.service.UserService#findByUsername(java.lang.String)
	 */
	@Override
	public User findByUsername(String username) {
		return userDao.findByUsername(username);
	}

	@Override
	public User upDate(User user) {
		return userDao.save(user);
	}

}
\n
./core//service//KnowledgePointService.java
\n
package com.taolicloud.core.service;

import java.util.Set;

import com.taolicloud.core.entity.Field;
import com.taolicloud.core.entity.KnowledgePoint;
import com.taolicloud.core.service.base.SimpleService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className KnowledgeService
 * @date   2018年3月22日上午11:39:48
 * @desc  [用一句话描述改文件的功能]
 */
public interface KnowledgePointService extends SimpleService<KnowledgePoint, Integer>{

	Set<KnowledgePoint> getKnowledgePointByField(Field field);

}
\n
./core//service//NoticeService.java
\n
package com.taolicloud.core.service;

import java.util.List;

import com.taolicloud.core.entity.Notice;
import com.taolicloud.core.service.base.SimpleService;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className NoticeService
 * @date 2018年5月7日下午2:23:26
 * @desc [用一句话描述改文件的功能]
 */
public interface NoticeService extends SimpleService<Notice, Integer> {

	List<Notice> findByFlag(Integer flag);

}
\n
./core//service//PageHistoryService.java
\n
package com.taolicloud.core.service;

import java.util.List;

import com.taolicloud.core.entity.Page;
import com.taolicloud.core.entity.PageHistory;
import com.taolicloud.core.entity.User;
import com.taolicloud.core.service.base.SimpleService;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className PageHistoryService
 * @date 2018年5月3日上午11:16:42
 * @desc [用一句话描述改文件的功能]
 */
public interface PageHistoryService extends SimpleService<PageHistory, Integer> {

	PageHistory findByPageAndUserAndStatus(Page page, User user, Boolean flag);
	
	List<PageHistory> findAllByPageAndUserAndStatus(Page page, User user, Boolean flag);
}
\n
./core//service//PageService.java
\n
package com.taolicloud.core.service;

import java.util.List;

import com.taolicloud.core.entity.Page;
import com.taolicloud.core.service.base.SimpleService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className PageService
 * @date   2018年4月18日上午10:08:01
 * @desc  [用一句话描述改文件的功能]
 */
public interface PageService extends SimpleService<Page, Integer>{

	List<Page> findByStatus(int i);

}
\n
./core//service//PageTypeService.java
\n
package com.taolicloud.core.service;

import com.taolicloud.core.entity.PageType;
import com.taolicloud.core.service.base.SimpleService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className PageTypeService
 * @date   2018年4月18日下午5:54:47
 * @desc  [用一句话描述改文件的功能]
 */
public interface PageTypeService extends SimpleService<PageType, Integer>{

}
\n
./core//service//QuestionHistoryService.java
\n
package com.taolicloud.core.service;

import java.util.List;

import com.taolicloud.core.entity.Question;
import com.taolicloud.core.entity.QuestionHistory;
import com.taolicloud.core.entity.User;
import com.taolicloud.core.service.base.SimpleService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className QuestionHistoryService
 * @date   2018年4月30日下午4:35:26
 * @desc  [用一句话描述改文件的功能]
 */
public interface QuestionHistoryService extends SimpleService<QuestionHistory, Integer>{

	QuestionHistory findByQuestion(Question question);

	QuestionHistory findByUserAndQuestion(User user, Question question);

	List<QuestionHistory> findByUserAndFlag(User user, boolean flag);

}
\n
./core//service//QuestionPageService.java
\n
package com.taolicloud.core.service;

import java.util.List;

import com.taolicloud.core.entity.Page;
import com.taolicloud.core.entity.Question;
import com.taolicloud.core.entity.QuestionPage;
import com.taolicloud.core.service.base.SimpleService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className QuestionPageService
 * @date   2018年4月26日下午2:58:13
 * @desc  [用一句话描述改文件的功能]
 */
public interface QuestionPageService extends SimpleService<QuestionPage, Integer>{

	List<QuestionPage> findByPage(Integer pid);

	void updata(QuestionPage po);

	QuestionPage findByPageAndQuestion(Page page, Question question);

}
\n
./core//service//QuestionService.java
\n
package com.taolicloud.core.service;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.taolicloud.core.entity.Field;
import com.taolicloud.core.entity.Question;
import com.taolicloud.core.entity.QuestionType;
import com.taolicloud.core.service.base.SimpleService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className QuestionService
 * @date   2018年3月21日下午3:08:05
 * @desc  [用一句话描述改文件的功能]
 */
public interface QuestionService extends SimpleService<Question, Integer>{

	Page<Question> findByFieldAndKnowledgePointAndQuestionType(Field field,Integer knowledge,QuestionType qType,Pageable pageable);

	void update(Question po);

	List<Question> findAllByFieldAndKnowledgePointAndQuestionType(Field field, Integer knowledgePoint,
			QuestionType questionType);

}
\n
./core//service//QuestionTypeService.java
\n
package com.taolicloud.core.service;

import com.taolicloud.core.entity.QuestionType;
import com.taolicloud.core.service.base.SimpleService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className QuestionTypeService
 * @date   2018年3月23日上午10:28:03
 * @desc  [用一句话描述改文件的功能]
 */
public interface QuestionTypeService extends SimpleService<QuestionType, Integer>{

}
\n
./core//service//UserService.java
\n
package com.taolicloud.core.service;

import com.taolicloud.core.entity.User;
import com.taolicloud.core.service.base.SimpleService;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
public interface UserService extends SimpleService<User, Integer>{
	User findByUsername(String username);
	User upDate(User user);
}
\n
./EcmsApplication.java
\n
package com.taolicloud;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class EcmsApplication {

	public static void main(String[] args) {
		SpringApplication.run(EcmsApplication.class, args);
	}
}
\n
./http//converter//JSONMessageConvertor.java
\n
package com.taolicloud.http.converter;

import java.io.IOException;
import java.io.OutputStream;

import org.springframework.http.HttpInputMessage;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.converter.AbstractHttpMessageConverter;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.http.converter.HttpMessageNotWritableException;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
public class JSONMessageConvertor extends AbstractHttpMessageConverter<Object> {

	@Override
	protected Object readInternal(Class<? extends Object> clz,
			HttpInputMessage inputMessage) throws IOException,
			HttpMessageNotReadableException {
		throw new UnsupportedOperationException();
	}

	@Override
	protected boolean supports(Class<?> clz) {
		return true;
	}

	@Override
	protected void writeInternal(Object t, HttpOutputMessage outputMessage)
			throws IOException, HttpMessageNotWritableException {
		String jsonString = JSON.toJSONString(t,
				SerializerFeature.WriteDateUseDateFormat,
				SerializerFeature.DisableCircularReferenceDetect);
		OutputStream os = outputMessage.getBody();
		os.write(jsonString.getBytes("UTF-8"));
		os.flush();
	}
}
\n
./util//CheckCodeUtil.java
\n
package com.taolicloud.util;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.Random;

import javax.imageio.ImageIO;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
public class CheckCodeUtil {
	public static final String VERIFY_CODES = "23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
	private static Random random = new Random();

	/**

	 * 使用系统默认字符源生成验证码

	 * 

	 * @param verifySize

	 *            验证码长度

	 * @return

	 */
	public static String generateVerifyCode(int verifySize) {
		return generateVerifyCode(verifySize, VERIFY_CODES);
	}

	/**

	 * 使用指定源生成验证码

	 * 

	 * @param verifySize

	 *            验证码长度

	 * @param sources

	 *            验证码字符源

	 * @return

	 */
	public static String generateVerifyCode(int verifySize, String sources) {
		if (sources == null || sources.length() == 0) {
			sources = VERIFY_CODES;
		}
		int codesLen = sources.length();
		Random rand = new Random(System.currentTimeMillis());
		StringBuilder verifyCode = new StringBuilder(verifySize);
		for (int i = 0; i < verifySize; i++) {
			verifyCode.append(sources.charAt(rand.nextInt(codesLen - 1)));
		}
		return verifyCode.toString();
	}

	/**

	 * 生成随机验证码文件,并返回验证码值

	 * 

	 * @param w

	 * @param h

	 * @param outputFile

	 * @param verifySize

	 * @return

	 * @throws IOException

	 */
	public static String outputVerifyImage(int w, int h, File outputFile, int verifySize) throws IOException {
		String verifyCode = generateVerifyCode(verifySize);
		outputImage(w, h, outputFile, verifyCode);
		return verifyCode;
	}

	/**

	 * 输出随机验证码图片流,并返回验证码值

	 * 

	 * @param w

	 * @param h

	 * @param os

	 * @param verifySize

	 * @return

	 * @throws IOException

	 */
	public static String outputVerifyImage(int w, int h, OutputStream os, int verifySize) throws IOException {
		String verifyCode = generateVerifyCode(verifySize);
		outputImage(w, h, os, verifyCode);
		return verifyCode;
	}

	/**

	 * 生成指定验证码图像文件

	 * 

	 * @param w

	 * @param h

	 * @param outputFile

	 * @param code

	 * @throws IOException

	 */
	public static void outputImage(int w, int h, File outputFile, String code) throws IOException {
		if (outputFile == null) {
			return;
		}
		File dir = outputFile.getParentFile();
		if (!dir.exists()) {
			dir.mkdirs();
		}
		try {
			outputFile.createNewFile();
			FileOutputStream fos = new FileOutputStream(outputFile);
			outputImage(w, h, fos, code);
			fos.close();
		} catch (IOException e) {
			throw e;
		}
	}

	/**

	 * 输出指定验证码图片流

	 * 

	 * @param w

	 * @param h

	 * @param os

	 * @param code

	 * @throws IOException

	 */
	public static void outputImage(int w, int h, OutputStream os, String code) throws IOException {
		int verifySize = code.length();
		BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
		Random rand = new Random();
		Graphics2D g2 = image.createGraphics();
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		Color[] colors = new Color[5];
		Color[] colorSpaces = new Color[] { Color.WHITE, Color.CYAN, Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA,
				Color.ORANGE, Color.PINK, Color.YELLOW };
		float[] fractions = new float[colors.length];
		for (int i = 0; i < colors.length; i++) {
			colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)];
			fractions[i] = rand.nextFloat();
		}
		Arrays.sort(fractions);

		g2.setColor(Color.GRAY);// 设置边框色

		g2.fillRect(0, 0, w, h);

		Color c = getRandColor(200, 250);
		g2.setColor(c);// 设置背景色

		g2.fillRect(0, 2, w, h - 4);

		// 绘制干扰线

		Random random = new Random();
		g2.setColor(getRandColor(160, 200));// 设置线条的颜色

		for (int i = 0; i < 20; i++) {
			int x = random.nextInt(w - 1);
			int y = random.nextInt(h - 1);
			int xl = random.nextInt(6) + 1;
			int yl = random.nextInt(12) + 1;
			g2.drawLine(x, y, x + xl + 40, y + yl + 20);
		}

		// 添加噪点

		float yawpRate = 0.05f;// 噪声率

		int area = (int) (yawpRate * w * h);
		for (int i = 0; i < area; i++) {
			int x = random.nextInt(w);
			int y = random.nextInt(h);
			int rgb = getRandomIntColor();
			image.setRGB(x, y, rgb);
		}

		shear(g2, w, h, c);// 使图片扭曲


		g2.setColor(getRandColor(100, 160));
		int fontSize = h - 4;
		Font font = new Font("宋体", Font.ITALIC, fontSize);
		g2.setFont(font);
		char[] chars = code.toCharArray();
		for (int i = 0; i < verifySize; i++) {
			AffineTransform affine = new AffineTransform();
			affine.setToRotation(Math.PI / 4 * rand.nextDouble() * (rand.nextBoolean() ? 1 : -1),
					(w / verifySize) * i + fontSize / 2, h / 2);
			g2.setTransform(affine);
			g2.drawChars(chars, i, 1, ((w - 10) / verifySize) * i + 5, h / 2 + fontSize / 2 - 10);
		}

		g2.dispose();
		ImageIO.write(image, "jpg", os);
	}

	private static Color getRandColor(int fc, int bc) {
		if (fc > 255)
			fc = 255;
		if (bc > 255)
			bc = 255;
		int r = fc + random.nextInt(bc - fc);
		int g = fc + random.nextInt(bc - fc);
		int b = fc + random.nextInt(bc - fc);
		return new Color(r, g, b);
	}

	private static int getRandomIntColor() {
		int[] rgb = getRandomRgb();
		int color = 0;
		for (int c : rgb) {
			color = color << 8;
			color = color | c;
		}
		return color;
	}

	private static int[] getRandomRgb() {
		int[] rgb = new int[3];
		for (int i = 0; i < 3; i++) {
			rgb[i] = random.nextInt(255);
		}
		return rgb;
	}

	private static void shear(Graphics g, int w1, int h1, Color color) {
		shearX(g, w1, h1, color);
		shearY(g, w1, h1, color);
	}

	private static void shearX(Graphics g, int w1, int h1, Color color) {

		int period = random.nextInt(2);

		boolean borderGap = true;
		int frames = 1;
		int phase = random.nextInt(2);

		for (int i = 0; i < h1; i++) {
			double d = (double) (period >> 1)
					* Math.sin((double) i / (double) period + (6.2831853071795862D * (double) phase) / (double) frames);
			g.copyArea(0, i, w1, 1, (int) d, 0);
			if (borderGap) {
				g.setColor(color);
				g.drawLine((int) d, i, 0, i);
				g.drawLine((int) d + w1, i, w1, i);
			}
		}

	}

	private static void shearY(Graphics g, int w1, int h1, Color color) {

		int period = random.nextInt(40) + 10; // 50;


		boolean borderGap = true;
		int frames = 20;
		int phase = 7;
		for (int i = 0; i < w1; i++) {
			double d = (double) (period >> 1)
					* Math.sin((double) i / (double) period + (6.2831853071795862D * (double) phase) / (double) frames);
			g.copyArea(i, 0, 1, h1, 0, (int) d);
			if (borderGap) {
				g.setColor(color);
				g.drawLine(i, (int) d, i, 0);
				g.drawLine(i, (int) d + h1, i, h1);
			}

		}

	}
}
\n
./util//PagingUtil.java
\n
package com.taolicloud.util;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className PagingUtil
 * @date   2018年3月21日下午3:16:53
 * @desc  [用一句话描述改文件的功能]
 */
public class PagingUtil {

	/**
	 * 返回anchor类型的分页
	 * @param currentPageNo
	 * @param maxPageNo
	 * @param parameters
	 * @param url
	 * @return
	 */
	public static String getPagelink(int currentPageNo, int maxPageNo, String parameters, String url) {

		currentPageNo = currentPageNo > maxPageNo ? maxPageNo : currentPageNo;
		int begainNo = currentPageNo - 5 > 0 ? currentPageNo - 5 : 1;
		int endNo = begainNo + 9 > maxPageNo ? maxPageNo : begainNo + 9;
		StringBuffer bf = new StringBuffer();

		if (maxPageNo > 1) {
			bf.append(currentPageNo > 1 ? ("<li><a href = \"" + url + "?page=" + (currentPageNo - 1 > 1 ? currentPageNo - 1 : 1) + parameters + "\">上一页</a></li>") : "<li class=\"disabled\"><a>上一页</a></li>");
			for (int i = begainNo; i <= endNo; i++) {

				if (i == currentPageNo) {

					bf.append("<li class=\"active\"><a href = \"" + url + "?page=" + i + parameters + "\" >" + i + "</a></li>");
				} else
					bf.append("<li><a href = \"" + url + "?page=" + i + parameters + "\" >" + i + "</a></li>");
			}
			bf.append(currentPageNo < maxPageNo ? ("<li><a href = \"" + url + "?page=" + (currentPageNo + 1 > maxPageNo ? maxPageNo : currentPageNo + 1) + parameters + "\">下一页</a></li>") : "<li class=\"disabled\"><a>下一页</a></li>");
			return bf.toString();
		}
		return "";

	}
	
	
	/**
	 * 返回button类型的分页
	 * @param currentPageNo
	 * @param maxPageNo
	 * @return
	 */
	public static String getPageBtnlink(int currentPageNo, int maxPageNo) {

		currentPageNo = currentPageNo > maxPageNo ? maxPageNo : currentPageNo;
		int begainNo = currentPageNo - 5 > 0 ? currentPageNo - 5 : 1;
		int endNo = begainNo + 9 > maxPageNo ? maxPageNo : begainNo + 9;
		StringBuffer bf = new StringBuffer();

		if (maxPageNo > 1) {
			bf.append(currentPageNo > 1 ? ("<li><a data-id = \"" + (currentPageNo - 1 > 1 ? currentPageNo - 1 : 1) + "\" >上一页</a></li>") : "<li class=\"disabled\"><a>上一页</a></li>");
			for (int i = begainNo; i <= endNo; i++) {

				if (i == currentPageNo) {

					bf.append("<li class=\"active\"><a data-id = \"" + i + "\">" + i + "</a></li>");
				} else
					bf.append("<li><a data-id = \"" + i + "\" >" + i
							+ "</a></li>");
			}
			bf.append(currentPageNo < maxPageNo ? ("<li><a data-id = \"" + (currentPageNo + 1 > maxPageNo ? maxPageNo : currentPageNo + 1) + "\" >下一页</a></li>") : "<li class=\"disabled\"><a>下一页</a></li>");
			return bf.toString();
		}
		return "";

	}
	
	public static void main(String[] args){
		System.out.println(PagingUtil.getPageBtnlink(5,100));
	}

}
\n
./util//RegularUtil.java
\n
package com.taolicloud.util;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.taolicloud.web.bind.Const;


/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
public class RegularUtil {
	/**

	 * 获取文本中img标签的src属性值

	 * 

	 * @param content

	 *            文本内容

	 * @return

	 */
	public static List<String> getImgStr(String content) {
		List<String> list = new ArrayList<String>();
		// 目前img标签标示有3种表达式

		// <img alt="" src="1.jpg"/> <img alt="" src="1.jpg"></img> <img alt=""

		// src="1.jpg">

		// 开始匹配content中的<img />标签

		Pattern p_img = Pattern.compile("<(img|IMG)(.*?)(/>|></img>|>)");
		Matcher m_img = p_img.matcher(content);
		boolean result_img = m_img.find();
		if (result_img) {
			while (result_img) {
				// 获取到匹配的<img />标签中的内容

				String str_img = m_img.group(2);
				// 开始匹配<img />标签中的src

				Pattern p_src = Pattern.compile("(src|SRC)=(\"|\')(.*?)(\"|\')");
				Matcher m_src = p_src.matcher(str_img);
				if (m_src.find()) {
					String str_src = m_src.group(3);
					list.add(str_src);
				}
				// 匹配content中是否存在下一个<img />标签，有则继续以上步骤匹配<img />标签中的src

				result_img = m_img.find();
			}
		}
		return list;
	}

	/**

	 * 给指定内容文本中的img标签添加CSS类

	 * 

	 * @param content

	 *            文本内容

	 * @param css

	 *            CSS类

	 * @return

	 */
	public static String addImgCss(String content, String css) {
		String regex = "(?i)(\\<img)([^\\>]+\\>)";
		content = content.replaceAll(regex, "$1 class=\"" + css + "\"$2");
		return content;
	}

	/**

	 * 验证是否是电话号码

	 * 

	 * @param phoneNumber

	 * @return

	 */
	public static boolean isPhoneNumber(String phoneNumber) {
		return Pattern.matches(Const.REGEX_MOBILE, phoneNumber);
	}
	/**

	 * 验证是否是邮箱

	 * @param email

	 * @return

	 */
	public static boolean isEmail(String email) {
		return Pattern.matches(Const.REGEX_EMAIL, email);
	}
	
	/**

	 * 验证是否是身份证号码

	 * @param idCard

	 * @return

	 */
	public static boolean isIdCard(String idCard) {
		return Pattern.matches(Const.REGEX_ID_CARD, idCard);
	}
	public static void main(String[] args) {
		String number = "522321199109024331";
		System.out.println(RegularUtil.isIdCard(number));
	}
	
	
}
\n
./web//bind//Const.java
\n
package com.taolicloud.web.bind;

import javax.servlet.http.HttpServletRequest;

import org.springframework.util.ClassUtils;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
public class Const {

	
	/**

	 * 前端登录用户

	 */
	public static final String LOGIN_USER = "login_user";
	
	/**

	 * 后端登录用户

	 */
	public static final String LOGIN_ADMIN = "login_admin";
	
	/**

	 * 验证码

	 */
	public static final String CHECK_CODE = "check_code";
	
	/**

	 * 默认密码

	 */
	public static final String DEFAULT_PWD = "rcms123456";
	
	/**

	 * 七牛云对象存储

	 */
	public static final String OSS_QINIU = "oss-qiniu";
	
	/**

	 * 七牛云存储地址名称

	 */
	public static final String QINIU_PATH = "path";
	
	/**

	 * 七牛云存储接入码名称

	 */
	public static final String QINIU_ACCESS = "qiniuAccess";
	
	/**

	 * 七牛云存储秘钥名称

	 */
	public static final String QINIU_KEY = "qiniuKey";
	
	/**

	 * 七牛云存储“水桶”名称

	 */
	public static final String QINIU_BUCKET_NAME = "bucketName";
	
	/**

	 * 阿里云对象存储

	 */
	public static final String OSS_ALIYUN = "oss_aliyun";
	
	/**

	 * 默认第一页

	 */
	public static final Integer DEFAULT_PAGE_ON = 1;
	/**

	 * 默认的分页大小

	 */
	public static final Integer DEFAULT_PAGE_SIZE = 15;
	
	/**

	 * 男性

	 */
	public static final Integer MALE = 1;
	/**

	 * 女性

	 */
	public static final Integer FEMALE = 0;
	/**

	 * 性别保密

	 */
	public static final Integer SEX_SECRET = -1;
	
	/**

	 * 默认的用户头像

	 */
	public static final String DEFAULT_USER_AVATAR = "assert/img/default_user_avatar.png";
	
	/**

	 * 正则表达式：验证手机号码

	 */
	public static final String REGEX_MOBILE = "^((17[0-9])|(14[0-9])|(13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d{8}$";
	
	/**

	 * 正则表达式：验证邮箱

	 */
	public static final String REGEX_EMAIL = "^([a-z0-9A-Z]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$";
	
	/**

     * 正则表达式：验证身份证

     */
    public static final String REGEX_ID_CARD = "(^\\d{15}$)|(\\d{17}(?:\\d|x|X)$)";
	
    /**
     * 本地站点信息存储文件名称
     */
    public static final String LOCAL_SITE_STORAGE = "d://ecms";
    
    /**
     * 站点名称
     */
    public static final String SITE_NAME  = "site_name";
    /**
     * 站点标题
     */
    public static final String SITE_TITLE = "site_title";
    /**
     * 站点子标题
     */
    public static final String SITE_SUB_TITLE = "site_sub_title";
    /**
     * 站点域名
     */
    public static final String SITE_DOMAIN = "site_domain";
    /**
     * 站点联系邮箱
     */
    public static final String SITE_EMAIL = "site_email";
    /**
     * 站点联系地址
     */
    public static final String SITE_ADDRESS = "site_address";
    /**
     * 联系电话
     */
    public static final String SITE_MOBILE = "site_mobile";
    /**
     * 邮政编码
     */
    public static final String SITE_POST_CODE = "site_post_code";
    /**
     * 站点描述
     */
    public static final String SITE_DESCRIPTION = "site_description";
    /**
     * 站点关键词
     */
    public static final String SITE_KEYWORDS = "site_keywords";
    /**
     * 备案号
     */
    public static final String SITE_ICP = "site_icp";
    /**
     * 版权信息
     */
    public static final String SITE_COPYRIGHT = "site_copyright";
    /**
     * 站点标志
     */
    public static final String SITE_LOGO = "site_logo";
    
	public static class HttpClient{
		/**

		 * 基本路径

		 */
		public static final String BASE_PATH = basePath();
		
		/**

		 * 上下文路径

		 */
		public static final String CONTEXT_PATH = request().getServletContext().getContextPath();
		
		/**

		 * 静态化模板路径前缀

		 */
		public static final String TEMPLATE_PREFIX = context().getResource("static").getPath();
		
		public static final String STATIC_PATH = context().getResource("templates").getPath();
		
		private static String basePath() {
			ServletRequestAttributes attributes = (ServletRequestAttributes)RequestContextHolder.currentRequestAttributes();
			HttpServletRequest request = attributes.getRequest();
			final String path = request.getScheme()+"://"
								+request.getServerName()+":"
								+(request.getServerPort()==80?"":request.getServerPort())
								+request.getContextPath();
			return path;
		}
		
		private static HttpServletRequest request() {
			ServletRequestAttributes attributes = (ServletRequestAttributes)RequestContextHolder.currentRequestAttributes();
			HttpServletRequest request = attributes.getRequest();
			return request;
		}
		
		private static ClassLoader context() {
			ClassLoader loader = ClassUtils.getDefaultClassLoader();
			return loader;
		}
	}
}\n
./web//bind//RoleType.java
\n
package com.taolicloud.web.bind;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className RoleType
 * @date   2018年3月15日下午5:57:11
 * @desc  [用一句话描述改文件的功能]
 */
public enum RoleType {
	
	ADMIN, TEACHER, STUDENT;
	
	public String parseText() {
		return this.toString();
	}
	
	public int parseInt() {
		return this.ordinal();
	}
	
	public static RoleType text(int ordinal) {
		for(RoleType r:RoleType.values()) {
			if(r.ordinal() == ordinal) {
				return r;
				
			}
		}
		return null;
	}
	
	public static List<RoleType> list(){
		List<RoleType> list = new ArrayList<>(Arrays.asList(RoleType.values()));
		return list;
	}
}
\n
./web//bind//Status.java
\n
package com.taolicloud.web.bind;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
public enum Status {
	
	/**

	 * 草稿

	 */
	DRAFT(-1),
	/**

	 * 提交

	 */
	COMMIT(0),
	/**

	 * 发布

	 */
	PUSH(1),
	/**

	 * 临时

	 */
	TEMP(0),
	/**

	 * 可用

	 */
	ENABLE(1),
	/**

	 *锁定

	 */
	LOCKED(0),
	/**

	 * 可用

	 */
	ACTIVED(1);
	
	private Integer value;
	
	private Status(Integer value) {
		this.value = value;
	}
	
	public Integer value() {
		return value;
	}
	
	public String parseText() {
		return this.toString();
	}
	
	public static List<Status> list(){
		List<Status> list = new ArrayList<>(Arrays.asList(Status.values()));
		return list;
	}
}
\n
./web//bind//Type.java
\n
package com.taolicloud.web.bind;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
public enum  Type {
	USER(1);
	
	private Integer value;
	
	private Type(Integer value) {
		this.value = value;
	}
	
	public Integer value() {
		return value;
	}
	
	public String parseText() {
		return this.toString();
	}
	
	public static List<Type> list(){
		List<Type> list = new ArrayList<>(Arrays.asList(Type.values()));
		return list;
	}
	
	public static class AttachType{
		public static final int USER = 0;
		public static final Map<Integer, String> STATE_INFO = new HashMap<Integer,String>();
		static {
			STATE_INFO.put(USER, "用户类型");
		}
	}
}
\n
./web//controller//IndexController.java
\n
package com.taolicloud.web.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taolicloud.core.entity.Comment;
import com.taolicloud.core.entity.Field;
import com.taolicloud.core.entity.KnowledgePoint;
import com.taolicloud.core.entity.Notice;
import com.taolicloud.core.entity.Page;
import com.taolicloud.core.entity.PageHistory;
import com.taolicloud.core.entity.Question;
import com.taolicloud.core.entity.QuestionHistory;
import com.taolicloud.core.entity.QuestionPage;
import com.taolicloud.core.entity.QuestionType;
import com.taolicloud.core.entity.User;
import com.taolicloud.core.entity.util.Data;
import com.taolicloud.core.entity.util.QuestionImproveResult;
import com.taolicloud.core.service.CommentService;
import com.taolicloud.core.service.FieldService;
import com.taolicloud.core.service.KnowledgePointService;
import com.taolicloud.core.service.NoticeService;
import com.taolicloud.core.service.PageHistoryService;
import com.taolicloud.core.service.PageService;
import com.taolicloud.core.service.QuestionHistoryService;
import com.taolicloud.core.service.QuestionPageService;
import com.taolicloud.core.service.QuestionService;
import com.taolicloud.core.service.QuestionTypeService;
import com.taolicloud.core.service.UserService;
import com.taolicloud.web.bind.Const;

/**
 * @author 马郡
 * @email Accpect_Majun@163.com / mj@taolicloud.com
 * @className IndexController
 * @date 2018年4月28日下午2:14:20
 * @desc [用一句话描述改文件的功能]
 */
@Controller
public class IndexController {

	@Autowired
	private UserService userService;

	@Autowired
	private FieldService fieldService;

	@Autowired
	private KnowledgePointService knowledgePointService;

	@Autowired
	private QuestionService questionService;

	@Autowired
	private QuestionTypeService questionTypeService;

	@Autowired
	private QuestionHistoryService questionHistoryService;

	@Autowired
	private CommentService commentService;

	@Autowired
	private PageService pageService;

	@Autowired
	private QuestionPageService questionPageService;

	@Autowired
	private PageHistoryService pageHistoryService;

	@Autowired
	NoticeService noticeService;

	@GetMapping(value = { "/", "/index" })
	public String index(Model model) {
		List<Notice> notices = noticeService.findByFlag(1);
		model.addAttribute("notices", notices);
		return "index";
	}

	@GetMapping("/setting")
	public String setting(HttpSession session, Model model) {
		User user = (User) session.getAttribute(Const.LOGIN_ADMIN);
		if (user == null) {
			return "redirect:/admin/login";
		} else {
			user = userService.findByUsername(user.getUsername());
			user.setLastLoginTime(new Date());
			userService.upDate(user);
			List<Field> fields = fieldService.findAll();
			model.addAttribute("fields", fields);
			model.addAttribute("user", user);
			return "setting";
		}
	}

	@PostMapping("/setting")
	public String setting(User user) {
		User po = userService.findById(user.getId());
		po.setFieldId(user.getFieldId());
		po.setPhone(user.getPhone());
		po.setEmail(user.getEmail());
		userService.upDate(po);
		return "redirect:/";
	}

	@GetMapping("/practice")
	public String practice() {
		return "practice";
	}

	@GetMapping("/list_page")
	public String list_page(Model model, HttpSession session) {
		User user = (User) session.getAttribute(Const.LOGIN_ADMIN);
		if (user == null) {
			return "error/login_error";
		} else {
			List<Page> pages = pageService.findByStatus(1);
			model.addAttribute("list", pages);
			return "list_page";
		}
	}

	@GetMapping("/detail_page")
	public String detail_page(Integer id, HttpSession session, Model model) {
		User user = (User) session.getAttribute(Const.LOGIN_ADMIN);
		if (user == null) {
			return "redirect:/admin/login";
		} else {
			user = userService.findByUsername(user.getUsername());
			Page page = pageService.findById(id);
			List<QuestionPage> questionPages = questionPageService.findByPage(id);
			List<Question> questions = new ArrayList<>();
			for (QuestionPage questionPage : questionPages) {
				questions.add(questionPage.getQuestion());
			}

			PageHistory po = pageHistoryService.findByPageAndUserAndStatus(page, user, true);

			long time = 0;
			if (po != null) {
				time = page.getDuration() * 60 *1000 + po.getCreateTime().getTime() - new Date().getTime();
				model.addAttribute("pageHistory", po);
			} else {
				PageHistory pageHistory = new PageHistory();
				pageHistory.setStatus(true);
				pageHistory.setPage(page);
				pageHistory.setUser(user);
				pageHistory.setCreateTime(new Date());
				pageHistoryService.saveAndFlush(pageHistory);

				time = page.getDuration() * 60 * 1000 + pageHistory.getCreateTime().getTime() - new Date().getTime();
				model.addAttribute("pageHistory", pageHistory);

			}
			time = time - time%1000;
			if(time>0){
				time /= 1000;
			}else{
				time = 0;
			}
			model.addAttribute("time", String.valueOf(time));
			model.addAttribute("questions", questions);
			model.addAttribute("page", page);
			return "detail_page";
		}
	}

	@GetMapping("/strengthen")
	public String strengthen(HttpSession session, Model model) {
		User user = (User) session.getAttribute(Const.LOGIN_ADMIN);
		if (user == null) {
			return "error/login_error";
		} else {
			user = userService.findByUsername(user.getUsername());
			if (user.getFieldId() != null && user.getFieldId() > 0) {
				Field field = fieldService.findById(user.getFieldId());
				Set<KnowledgePoint> knowledgePoints = knowledgePointService.getKnowledgePointByField(field);
				LinkedHashMap<String, List<QuestionImproveResult>> list = new LinkedHashMap<>();
				List<QuestionType> qTypes = questionTypeService.findAll();
				for (KnowledgePoint knowledgePoint : knowledgePoints) {
					List<QuestionImproveResult> tmp = new ArrayList<>();
					for (QuestionType questionType : qTypes) {
						List<Question> questions = questionService.findAllByFieldAndKnowledgePointAndQuestionType(field,
								knowledgePoint.getId(), questionType);
						if (questions != null && questions.size() > 0) {
							QuestionImproveResult result = new QuestionImproveResult();
							result.setKnowledgePointId(knowledgePoint.getId());
							result.setKnowledgePointName(knowledgePoint.getName());
							result.setQuestionTypeId(questionType.getId());
							result.setQuestionTypeName(questionType.getName());
							result.setAmount(questions.size());
							Integer wrong = 0, right = 0;
							for (Question question : questions) {
								QuestionHistory questionHistory = questionHistoryService.findByUserAndQuestion(user,
										question);
								if (questionHistory != null) {
									if (questionHistory.getFlag()) {
										right++;
									} else {
										wrong++;
									}
								}
							}
							result.setWrongTimes(wrong);
							result.setRightTimes(right);
							tmp.add(result);
						}
					}
					list.put(knowledgePoint.getName(), tmp);
				}
				model.addAttribute("list", list);
				return "list_knowledge";
			} else {
				return "error/field_unfound";
			}
		}
	}

	@GetMapping("/detail_strengthen")
	public String detailStrengthen(Integer knowledgeId, Integer typeId, Float num, Model model, HttpSession session) {
		User user = (User) session.getAttribute(Const.LOGIN_ADMIN);
		if (user == null) {
			return "redirect:/admin/login";
		}
		user = userService.findByUsername(user.getUsername());

		KnowledgePoint knowledgePoint = knowledgePointService.findById(knowledgeId);
		QuestionType questionType = questionTypeService.findById(typeId);
		List<Question> list = questionService.findAllByFieldAndKnowledgePointAndQuestionType(null, knowledgeId,
				questionType);
		model.addAttribute("knowledges", knowledgePoint);
		model.addAttribute("questionType", questionType);
		model.addAttribute("size", list.size());
		Date time = null;

		Question pre = new Question();
		Question index = new Question();
		Question after = new Question();

		for (int i = 0; i < list.size(); i++) {
			Question question = list.get(i);
			QuestionHistory questionHistory = questionHistoryService.findByUserAndQuestion(user, question);
			if (questionHistory != null) {
				if (time == null) {
					time = questionHistory.getCommitTime();
				} else if (time.compareTo(questionHistory.getCommitTime()) < 0) {
					time = questionHistory.getCommitTime();
				}
				index = question;
				if (i - 1 >= 0) {
					pre = list.get(i - 1);
				}
				if (i + 1 < list.size()) {
					after = list.get(i + 1);
				}
			} else {
				if (index.getId() == null) {
					index = question;
					if (i - 1 >= 0) {
						pre = list.get(i - 1);
					}
					if (i + 1 < list.size()) {
						after = list.get(i + 1);
					}
				}
			}
		}
		List<Comment> comments = commentService.findByQuestion(index.getId());
		float percentage = 0;
		if (num > 0) {
			percentage = num / list.size() * 100;
		}
		model.addAttribute("num", num);
		model.addAttribute("percentage", percentage);
		model.addAttribute("comments", comments);
		model.addAttribute("index", index);
		model.addAttribute("pre", pre);
		model.addAttribute("after", after);

		return "detail_strengthen";
	}

	@GetMapping("/detail_strengthen_order")
	public String order(Integer knowledgeId, Integer typeId, Float num, Integer qId, Model model, HttpSession session) {
		User user = (User) session.getAttribute(Const.LOGIN_ADMIN);
		if (user == null) {
			return "redirect:/admin/login";
		}

		KnowledgePoint knowledgePoint = knowledgePointService.findById(knowledgeId);
		QuestionType questionType = questionTypeService.findById(typeId);
		List<Question> list = questionService.findAllByFieldAndKnowledgePointAndQuestionType(null, knowledgeId,
				questionType);
		model.addAttribute("knowledges", knowledgePoint);
		model.addAttribute("questionType", questionType);
		model.addAttribute("size", list.size());

		Question pre = new Question();
		Question index = new Question();
		Question after = new Question();
		for (int i = 0; i < list.size(); i++) {
			Question question = list.get(i);
			if (question.getId() == qId) {
				index = question;
				if (i - 1 >= 0) {
					pre = list.get(i - 1);
				}
				if (i + 1 < list.size()) {
					after = list.get(i + 1);
				}
			}
		}
		List<Comment> comments = commentService.findByQuestion(index.getId());
		float percentage = 0;
		if (num > 0) {
			percentage = num / list.size() * 100;
		}
		model.addAttribute("num", num);
		model.addAttribute("percentage", percentage);
		model.addAttribute("comments", comments);
		model.addAttribute("index", index);
		model.addAttribute("pre", pre);
		model.addAttribute("after", after);

		return "detail_strengthen";
	}

	@GetMapping("/detail_error")
	public String detail_error(ModelMap model, HttpSession session) {
		User user = (User) session.getAttribute(Const.LOGIN_ADMIN);
		if (user == null) {
			return "redirect:/admin/login";
		}
		user = userService.findByUsername(user.getUsername());
		List<QuestionHistory> questionHistories = questionHistoryService.findByUserAndFlag(user, false);
		if (questionHistories != null && questionHistories.size() > 0) {
			Question pre = new Question();
			Question index = new Question();
			Question after = new Question();
			Date tmp = null;
			for (int i = 0; i < questionHistories.size(); i++) {
				QuestionHistory questionHistory = questionHistories.get(i);
				if (tmp == null || tmp.compareTo(questionHistory.getCommitTime()) < 0) {
					index = questionHistory.getQuestion();
					if (i - 1 >= 0) {
						pre = questionHistories.get(i - 1).getQuestion();
					}
					if (i + 1 < questionHistories.size()) {
						after = questionHistories.get(i + 1).getQuestion();
					}
				}
			}
			List<Comment> comments = commentService.findByQuestion(index.getId());
			model.put("size", questionHistories.size());
			model.addAttribute("index", index);
			model.addAttribute("pre", pre);
			model.addAttribute("after", after);
			model.addAttribute("comments", comments);
			return "detail_error";
		}
		return "redirect:/practice";
	}

	@GetMapping("/detail_error_order")
	public String detail_error(Integer id, ModelMap model, HttpSession session) {
		User user = (User) session.getAttribute(Const.LOGIN_ADMIN);
		if (user == null) {
			return "redirect:/admin/login";
		}
		user = userService.findByUsername(user.getUsername());
		List<QuestionHistory> questionHistories = questionHistoryService.findByUserAndFlag(user, false);
		if (questionHistories != null && questionHistories.size() > 0) {
			Question pre = new Question();
			Question index = new Question();
			Question after = new Question();
			for (int i = 0; i < questionHistories.size(); i++) {
				QuestionHistory questionHistory = questionHistories.get(i);
				if (questionHistory.getQuestion().getId() == id) {
					index = questionHistory.getQuestion();
					if (i - 1 >= 0) {
						pre = questionHistories.get(i - 1).getQuestion();
					}
					if (i + 1 < questionHistories.size()) {
						after = questionHistories.get(i + 1).getQuestion();
					}
				}
			}
			List<Comment> comments = commentService.findByQuestion(index.getId());
			model.put("size", questionHistories.size());
			model.addAttribute("index", index);
			model.addAttribute("pre", pre);
			model.addAttribute("after", after);
			model.addAttribute("comments", comments);
			return "detail_error";
		}
		return "redirect:/practice";
	}

	@GetMapping("/submit_question")
	@ResponseBody
	Data submit(Integer qId, String answer, Model model, HttpSession session) {
		User user = (User) session.getAttribute(Const.LOGIN_ADMIN);
		user = userService.findByUsername(user.getUsername());
		Question question = questionService.findById(qId);
		if (answer.equals(question.getAnswer())) {
			QuestionHistory questionHistory = questionHistoryService.findByUserAndQuestion(user, question);
			if (questionHistory == null) {
				questionHistory = new QuestionHistory();
				questionHistory.setUser(user);
				questionHistory.setQuestion(question);
			}
			questionHistory.setCommitTime(new Date());
			questionHistory.setFlag(true);
			questionHistoryService.saveAndFlush(questionHistory);
			return Data.success(Data.NOOP);
		} else {
			QuestionHistory questionHistory = questionHistoryService.findByUserAndQuestion(user, question);
			if (questionHistory == null) {
				questionHistory = new QuestionHistory();
				questionHistory.setUser(user);
				questionHistory.setQuestion(question);
			}
			questionHistory.setCommitTime(new Date());
			questionHistory.setFlag(false);
			questionHistoryService.saveAndFlush(questionHistory);
			return Data.failured("回答错误");
		}
	}

	@GetMapping("/submit_page")
	@ResponseBody
	Data submit_page(PageHistory pageHistory) {

		PageHistory po = pageHistoryService.findById(pageHistory.getId());
		po.setAnswers(pageHistory.getAnswers());
		float counts = 0;

		for (Integer key : po.getAnswers().keySet()) {
			Question question = questionService.findById(key);
			String answer = po.getAnswers().get(key);
			if (answer.equals(question.getAnswer())) {
				QuestionPage questionPage = questionPageService.findByPageAndQuestion(po.getPage(), question);
				counts += questionPage.getPoints();
			}
		}
		po.setCounts(counts);
		po.setStatus(false);
		pageHistoryService.saveAndFlush(po);

		return Data.success(Data.NOOP);
	}

	@GetMapping(value = "/submit_comment")
	@ResponseBody
	Data submit_comment(String content, Integer qId, Integer uId) {

		User user = userService.findById(uId);
		if (user == null) {
			return Data.failured("未登录");
		}

		Comment comment = new Comment();
		User po = new User();
		po.setId(user.getId());
		po.setUsername(user.getUsername());

		comment.setUser(user);
		comment.setQuestion(qId);
		comment.setCreateTime(new Date());
		comment.setContent(content);

		commentService.saveAndFlush(comment);

		comment.setUser(po);
		return Data.success(comment);
	}

	@GetMapping("/user_page")
	public String user_page(Model model, HttpSession session) {
		User user = (User) session.getAttribute(Const.LOGIN_ADMIN);
		if (user == null) {
			return "redirect:/admin/login";
		}
		user = userService.findByUsername(user.getUsername());
		List<PageHistory> pageHistories = pageHistoryService.findAllByPageAndUserAndStatus(null, user, false);

		model.addAttribute("list", pageHistories);
		return "user_page";
	}

	@GetMapping("/user_question")
	public String user_question(Model model, HttpSession session) {
		User user = (User) session.getAttribute(Const.LOGIN_ADMIN);
		if (user == null) {
			return "redirect:/admin/login";
		}
		user = userService.findByUsername(user.getUsername());
		if (user.getFieldId() != null && user.getFieldId() > 0) {
			Field field = fieldService.findById(user.getFieldId());
			Set<KnowledgePoint> knowledgePoints = knowledgePointService.getKnowledgePointByField(field);
			LinkedHashMap<String, List<QuestionImproveResult>> list = new LinkedHashMap<>();
			LinkedHashMap<String, Float> points = new LinkedHashMap<>();
			List<QuestionType> qTypes = questionTypeService.findAll();
			for (KnowledgePoint knowledgePoint : knowledgePoints) {
				List<QuestionImproveResult> tmp = new ArrayList<>();
				float sum = 0;
				float sure = 0;
				for (QuestionType questionType : qTypes) {
					List<Question> questions = questionService.findAllByFieldAndKnowledgePointAndQuestionType(field,
							knowledgePoint.getId(), questionType);
					if (questions != null && questions.size() > 0) {
						QuestionImproveResult result = new QuestionImproveResult();
						result.setKnowledgePointId(knowledgePoint.getId());
						result.setKnowledgePointName(knowledgePoint.getName());
						result.setQuestionTypeId(questionType.getId());
						result.setQuestionTypeName(questionType.getName());
						result.setAmount(questions.size());
						Integer wrong = 0, right = 0;
						for (Question question : questions) {
							QuestionHistory questionHistory = questionHistoryService.findByUserAndQuestion(user,
									question);
							if (questionHistory != null) {
								if (questionHistory.getFlag()) {
									right++;
								} else {
									wrong++;
								}
							}
						}
						result.setWrongTimes(wrong);
						result.setRightTimes(right);
						tmp.add(result);
						sum += questions.size();
						sure += right;
					}
				}
				list.put(knowledgePoint.getName(), tmp);
				if (sum != 0 && sure != 0) {
					points.put(knowledgePoint.getName(), sure / sum * 100);
				} else {
					points.put(knowledgePoint.getName(), (float) 0);
				}
			}
			model.addAttribute("points", points);
			model.addAttribute("list", list);
			return "uesr_question";
		} else {
			return "error/field_unfound";
		}
	}
}\n
./web//exception//CmsException.java
\n
package com.taolicloud.web.exception;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
public class CmsException extends RuntimeException{

	private static final long serialVersionUID = 7106822586251164559L;

	protected String key;
	protected Object[] args;

	/**

	 * 

	 */
	public CmsException() {
		super();
	}

	/**

	 * @param arg0

	 * @param arg1

	 * @param arg2

	 * @param arg3

	 */
	public CmsException(String arg0, Throwable arg1, boolean arg2, boolean arg3) {
		super(arg0, arg1, arg2, arg3);
	}

	/**

	 * @param arg0

	 * @param arg1

	 */
	public CmsException(String arg0, Throwable arg1) {
		super(arg0, arg1);
	}

	/**

	 * @param arg0

	 */
	public CmsException(String key) {
		super(key);
	}

	/**

	 * @param arg0

	 */
	public CmsException(Throwable arg0) {
		super(arg0);
	}
}
\n
./web//interceptor//ActionInterceptor.java
\n
package com.taolicloud.web.interceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.taolicloud.web.bind.Const;


/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
public class ActionInterceptor extends HandlerInterceptorAdapter {

	protected Logger logger=Logger.getLogger(this.getClass());
	
	private static String PATH = "path";	//基本路径，上下文路径
	
	private static String BASE_PATH = "basePath";	//完整的路径

	public static boolean IS_WINDOWS = false;
	
	/*
	 * 判断是否是Windows操作系统
	 */
	static {
		if(System.getProperty("os.name").toLowerCase().indexOf("windows")>0) {
			IS_WINDOWS = true;
		}
	}

	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		request.setAttribute(PATH, Const.HttpClient.BASE_PATH);
		request.setAttribute(BASE_PATH, Const.HttpClient.CONTEXT_PATH);
		return true;
	}
}
\n
./web//servlet//ExceptionHandler.java
\n
package com.taolicloud.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.HandlerExceptionResolver;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.druid.support.json.JSONUtils;
import com.taolicloud.web.exception.CmsException;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
public class ExceptionHandler implements HandlerExceptionResolver{

	/*
	 * (non-Javadoc)
	 * @see
	 * org.springframework.web.servlet.HandlerExceptionResolver#resolveException(
	 * javax.servlet.http.HttpServletRequest,
	 * javax.servlet.http.HttpServletResponse, java.lang.Object,
	 * java.lang.Exception)
	 */
	@Override
	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler,
			Exception exception) {
		// 判断是否ajax请求
		if (request.getHeader("accept") != null && (!(request.getHeader("accept").indexOf("application/json") > -1
				|| (request.getHeader("X-Requested-With") != null
						&& request.getHeader("X-Requested-With").indexOf("XMLHttpRequest") > -1)))) {
			// 如果不是ajax，JSP格式返回

			Map<String, Object> map = new HashMap<String, Object>();
			map.put("success", false);
			if (exception instanceof CmsException) {
				map.put("errorMsg", exception.getMessage());
			} else {
				map.put("errorMsg", "系统异常！");
			}
			exception.printStackTrace();
			// 对于非ajax请求，我们都统一跳转到error.jsp页面

			return new ModelAndView("/error", map);
		} else {
			// 如果是ajax请求，JSON格式返回

			try {
				response.setContentType("application/json;charset=UTF-8");
				PrintWriter writer = response.getWriter();
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("success", false);
				// 为安全起见，只有业务异常我们对前端可见，否则统一归为系统异常

				if (exception instanceof CmsException) {
					map.put("errorMsg", exception.getMessage());
				} else {
					map.put("errorMsg", "系统异常！");
				}
				exception.printStackTrace();
				writer.write(JSONUtils.toJSONString(map));
				writer.flush();
				writer.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return null;
	}
}
\n
./web//servlet//ValidateCodeServlet.java
\n
package com.taolicloud.web.servlet;

import java.io.IOException;

import javax.servlet.Servlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.taolicloud.util.CheckCodeUtil;
import com.taolicloud.web.bind.Const;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserService
 * @date   2018年3月16日上午9:56:21
 * @desc  [用一句话描述改文件的功能]
 */
public class ValidateCodeServlet extends HttpServlet implements Servlet{

	private static final long serialVersionUID = 1L;

	public void service(HttpServletRequest request,HttpServletResponse response) throws IOException{
		response.setHeader("Pragma", "No-cache");
		response.setHeader("Cache-Control", "No-cache");
		response.setDateHeader("Expires", 0);
		response.setContentType("image/jpeg");
		String initSize =this.getServletConfig().getInitParameter("size"); 
		String initWidth = this.getServletConfig().getInitParameter("width");
		String initHeight = this.getServletConfig().getInitParameter("height");
		int size = (initSize !=null)?Integer.parseInt(initSize):6;
		int w=(initWidth != null)?Integer.parseInt(initWidth):146;
		int h=(initHeight != null)?Integer.parseInt(initHeight):35;
		String validateCode = CheckCodeUtil.generateVerifyCode(size);
		HttpSession session = request.getSession();
		session.setAttribute(Const.CHECK_CODE, validateCode);
		System.out.println(session.getAttribute(Const.CHECK_CODE));
		CheckCodeUtil.outputImage(w, h, response.getOutputStream(), validateCode);
	}
}
\n
./web//view//RequestElement.java
\n
package com.taolicloud.web.view;

import java.io.Serializable;

import com.taolicloud.web.bind.Const;

/**
 * @author 马郡
 * @email  Accpect_Majun@163.com / mj@taolicloud.com 
 * @className UserController
 * @date   2018年3月19日上午9:13:01
 * @desc  [用一句话描述改文件的功能]
 */
public class RequestElement implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private Integer pageNo;
	private Integer pageSize;

	public RequestElement() {
		super();
	}

	public RequestElement(Integer pageNo, Integer pageSize) {
		super();
		this.pageNo = pageNo;
		this.pageSize = pageSize;
	}

	public Integer getPageNo() {
		if(pageNo == null || pageNo <=0) {
			pageNo =Const.DEFAULT_PAGE_ON;
		}
		return pageNo;
	}

	public void setPageNo(Integer pageNo) {
		this.pageNo = pageNo;
	}

	public Integer getPageSize() {
		return pageSize == null ? Const.DEFAULT_PAGE_SIZE : pageSize;
	}

	public void setPageSize(Integer pageSize) {
		this.pageSize = pageSize;
	}

	@Override
	public String toString() {
		return "ReqDto [pageNo=" + pageNo + ", pageSize=" + pageSize + "]";
	}
}
